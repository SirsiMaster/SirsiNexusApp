# Multi-stage production Dockerfile for SirsiNexus Core Engine
# Optimized for size, security, and performance

###########################################
# Stage 1: Build dependencies cache
###########################################
FROM rust:1.75-slim as dependencies

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy only Cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./

# Create dummy source to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies (this layer will be cached)
RUN cargo build --release && rm -rf src target/release/deps/sirsi*

###########################################
# Stage 2: Build application
###########################################
FROM dependencies as builder

# Copy source code
COPY src ./src
COPY build.rs ./
COPY proto ./proto

# Build the application
RUN cargo build --release

# Strip debug symbols for smaller binary
RUN strip target/release/sirsi-nexus

###########################################
# Stage 3: Runtime image
###########################################
FROM debian:bookworm-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    libpq5 \
    libssl3 \
    && rm -rf /var/lib/apt/lists/* \
    && useradd -r -u 1000 -m -d /app -s /bin/bash -g root sirsi

# Set up application directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/target/release/sirsi-nexus /usr/local/bin/sirsi-nexus

# Copy configuration files if they exist
COPY --from=builder /app/config/ ./config/ 2>/dev/null || :

# Create necessary directories and set permissions
RUN mkdir -p /app/logs /app/data \
    && chown -R sirsi:root /app \
    && chmod -R 755 /app

# Switch to non-root user
USER sirsi

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 9090

# Environment variables
ENV RUST_LOG=info
ENV ENVIRONMENT=production

# Command to run the application
CMD ["sirsi-nexus", "start"]
