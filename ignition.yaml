# SirsiNexus Platform Ignition Configuration
# This file defines the startup sequence and service dependencies for the entire platform

ignition:
  version: "1.0"
  name: "SirsiNexus Platform"
  description: "AI-Powered Infrastructure Management Platform"
  
  # Global Configuration
  global:
    timeout: 120  # Maximum startup time in seconds
    retry_attempts: 3
    retry_delay: 5  # Seconds between retry attempts
    health_check_interval: 30  # Seconds
    
  # Port Registry Configuration - Industry Standard Ports
  port_registry:
    enabled: true
    priority: "high"
    ranges:
      system_reserved: [1-1023]
      registered_ports: [1024-49151]
      dynamic_private: [49152-65535]
    
    # Service Port Assignments (Industry Standard)
    assignments:
      # Core Infrastructure Services
      cockroachdb_sql: 26257      # CockroachDB SQL
      cockroachdb_admin: 8081     # CockroachDB Admin UI
      redis: 6379                 # Redis Cache
      
      # Application Services
      sirsi_api: 8080            # Main REST API
      sirsi_grpc: 50051          # gRPC Service
      sirsi_websocket: 8100      # WebSocket Service
      sirsi_metrics: 9090        # Prometheus metrics
      sirsi_health: 8090         # Health check endpoint
      
      # Frontend Services
      nextjs_dev: 3000           # Next.js Development Server
      nextjs_prod: 3001          # Next.js Production Server
      storybook: 6006            # Storybook UI Dev
      
      # Monitoring & Observability
      jaeger: 16686              # Jaeger UI
      grafana: 3001              # Grafana Dashboard
      prometheus: 9090           # Prometheus Server
      
      # Development Tools
      webpack_dev: 8081          # Webpack Dev Server
      hot_reload: 8082           # Hot Module Replacement
      
    # Port Allocation Strategy
    allocation:
      strategy: "deterministic"  # vs "dynamic"
      fallback_enabled: true
      conflict_resolution: "priority_based"
      
  # Service Dependencies and Startup Order
  services:
    # Phase 1: Core Infrastructure (No Dependencies)
    - name: "port_registry"
      type: "system"
      priority: 1
      timeout: 10
      dependencies: []
      health_check: 
        endpoint: "internal"
        method: "status"
      
    - name: "cockroachdb"
      type: "database"
      priority: 2
      timeout: 30
      dependencies: ["port_registry"]
      startup_command: "cockroach start-single-node --insecure --host=localhost --port=26257 --http-port=8081"
      health_check:
        endpoint: "localhost:26257"
        method: "sql"
        query: "SELECT 1"
        
    - name: "redis"
      type: "cache"
      priority: 3
      timeout: 15
      dependencies: ["port_registry"]
      startup_command: "redis-server --port 6379"
      health_check:
        endpoint: "localhost:6379"
        method: "ping"
        
    # Phase 2: Core Application Services
    - name: "sirsi_core"
      type: "application"
      priority: 4
      timeout: 45
      dependencies: ["cockroachdb", "redis", "port_registry"]
      startup_command: "./target/release/sirsi-nexus start"
      environment:
        DATABASE_URL: "postgresql://root@localhost:26257/sirsi_nexus?sslmode=disable"
        REDIS_URL: "redis://localhost:6379"
        OPENAI_API_KEY: "${OPENAI_API_KEY}"
        ANTHROPIC_API_KEY: "${ANTHROPIC_API_KEY}"
        RUST_LOG: "sirsi_core=info,tower_http=info"
      health_check:
        endpoint: "localhost:8080/health"
        method: "http"
        expected_status: 200
        
    - name: "sirsi_grpc"
      type: "service"
      priority: 5
      timeout: 30
      dependencies: ["sirsi_core"]
      # Embedded in sirsi_core, verify it's running
      health_check:
        endpoint: "localhost:50051"
        method: "grpc"
        service: "agent.AgentService"
        
    - name: "sirsi_websocket"
      type: "service"
      priority: 6
      timeout: 30
      dependencies: ["sirsi_core"]
      # Embedded in sirsi_core, verify it's running
      health_check:
        endpoint: "localhost:8100"
        method: "websocket"
        path: "/agent-ws"
        
    # Phase 3: Frontend Services
    - name: "nextjs_frontend"
      type: "frontend"
      priority: 7
      timeout: 60
      dependencies: ["sirsi_core", "sirsi_grpc", "sirsi_websocket"]
      startup_command: "npm run dev"
      working_directory: "./ui"
      environment:
        NEXT_PUBLIC_API_URL: "http://localhost:8080"
        NEXT_PUBLIC_GRPC_URL: "http://localhost:50051"
        NEXT_PUBLIC_WS_URL: "ws://localhost:8100"
        PORT: "3000"
      health_check:
        endpoint: "localhost:3000"
        method: "http"
        path: "/"
        expected_status: 200
        
    # Phase 4: Monitoring & Observability (Optional)
    - name: "prometheus"
      type: "monitoring"
      priority: 8
      timeout: 30
      dependencies: ["sirsi_core"]
      optional: true
      health_check:
        endpoint: "localhost:9090"
        method: "http"
        path: "/metrics"
        
  # Frontend-Backend Integration Requirements
  integration:
    api_endpoints:
      # Core API Endpoints
      - endpoint: "/health"
        method: "GET"
        expected_status: 200
        description: "Basic health check"
        
      - endpoint: "/sirsi/get_overview"
        method: "GET"
        expected_status: 200
        description: "Sirsi persona overview"
        
      - endpoint: "/ai/health"
        method: "GET"
        expected_status: 200
        description: "AI services health check"
        
      - endpoint: "/orchestration/health"
        method: "GET"
        expected_status: 200
        description: "Agent orchestration health"
        
      - endpoint: "/ports/directory"
        method: "GET"
        expected_status: 200
        description: "Port registry directory"
        
    websocket_endpoints:
      - endpoint: "/agent-ws"
        port: 8100
        description: "Agent WebSocket connection"
        
    frontend_pages:
      # Critical pages that must work
      - path: "/"
        description: "Dashboard home page"
        
      - path: "/analytics"
        description: "Analytics dashboard"
        backend_deps: ["/sirsi/get_overview"]
        
      - path: "/agents"
        description: "AI agents management"
        backend_deps: ["/orchestration/health"]
        
      - path: "/console"
        description: "System console"
        backend_deps: ["/ports/directory"]
        
      - path: "/test-backend"
        description: "Backend integration tests"
        backend_deps: ["/health", "/ai/health"]
        
  # Failure Handling
  failure_handling:
    auto_recovery: true
    cascade_shutdown: true
    restart_policy: "on-failure"
    max_restarts: 3
    
    # Critical service failure responses
    critical_failures:
      - service: "cockroachdb"
        action: "shutdown_all"
        reason: "Database unavailable"
        
      - service: "sirsi_core"
        action: "restart_service"
        reason: "Core service failure"
        
      - service: "port_registry"
        action: "shutdown_all"
        reason: "Port allocation failure"
        
  # Pre-flight Checks
  preflight:
    system_requirements:
      - check: "memory"
        minimum: "4GB"
        
      - check: "disk_space"
        minimum: "10GB"
        
      - check: "network_ports"
        ports: [3000, 8080, 8081, 8100, 26257, 6379, 50051]
        
    environment_variables:
      required:
        - "DATABASE_URL"
        - "REDIS_URL"
        
      optional:
        - "OPENAI_API_KEY"
        - "ANTHROPIC_API_KEY"
        - "RUST_LOG"
        
    file_system:
      required_files:
        - "./target/release/sirsi-nexus"
        - "./ui/package.json"
        - "./ui/src/app/page.tsx"
        
      required_directories:
        - "./ui/src"
        - "./core-engine/src"
        - "./core-engine/migrations"
        
  # Post-startup Validation
  validation:
    integration_tests:
      - test: "api_connectivity"
        description: "Verify all API endpoints respond"
        
      - test: "websocket_connection"
        description: "Verify WebSocket connection works"
        
      - test: "frontend_backend_integration"
        description: "Verify frontend can communicate with backend"
        
      - test: "ai_services_available"
        description: "Verify AI services are configured and responding"
        
    performance_benchmarks:
      - metric: "api_response_time"
        threshold: "500ms"
        endpoint: "/health"
        
      - metric: "websocket_connection_time"
        threshold: "1000ms"
        endpoint: "/agent-ws"
        
      - metric: "frontend_load_time"
        threshold: "3000ms"
        endpoint: "/"
