(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3948],{1315:(e,n,a)=>{"use strict";a.d(n,{At:()=>g,Ay:()=>b,T9:()=>u,lr:()=>m,ww:()=>s});let t=(0,a(73106).Z0)({name:"ui",initialState:{theme:"light",sidebarCollapsed:!1,notifications:[],agentChatVisible:!1,currentContextualHints:[],loadingStates:{},modals:{welcome:!1,auth:!1,settings:!1,journeySelection:!1,optimizationWelcome:!1,scalingWelcome:!1},userJourney:{isFirstTime:!0,selectedJourney:null,completedTutorials:[]}},reducers:{toggleTheme:e=>{e.theme="light"===e.theme?"dark":"light"},toggleSidebar:e=>{e.sidebarCollapsed=!e.sidebarCollapsed},addNotification:(e,n)=>{e.notifications.push(n.payload)},removeNotification:(e,n)=>{e.notifications=e.notifications.filter(e=>e.id!==n.payload)},toggleAgentChat:e=>{e.agentChatVisible=!e.agentChatVisible},setContextualHints:(e,n)=>{e.currentContextualHints=n.payload},setLoadingState:(e,n)=>{e.loadingStates[n.payload.key]=n.payload.loading},setModalState:(e,n)=>{e.modals[n.payload.modal]=n.payload.visible},selectJourney:(e,n)=>{e.userJourney.selectedJourney=n.payload,e.userJourney.isFirstTime=!1,e.modals.journeySelection=!1,"migration"===n.payload?e.modals.welcome=!0:"optimization"===n.payload?e.modals.optimizationWelcome=!0:"scaling"===n.payload&&(e.modals.scalingWelcome=!0)},markTutorialComplete:(e,n)=>{e.userJourney.completedTutorials.includes(n.payload)||e.userJourney.completedTutorials.push(n.payload)},resetFirstTimeExperience:e=>{e.userJourney.isFirstTime=!0,e.userJourney.selectedJourney=null,e.userJourney.completedTutorials=[],e.modals.journeySelection=!0},markAsNotFirstTime:e=>{e.userJourney.isFirstTime=!1}}}),{toggleTheme:r,toggleSidebar:i,addNotification:o,removeNotification:s,toggleAgentChat:c,setContextualHints:l,setLoadingState:d,setModalState:u,selectJourney:m,markTutorialComplete:p,resetFirstTimeExperience:_,markAsNotFirstTime:g}=t.actions,b=t.reducer},30577:(e,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>F});var t=a(73365),r=a(1521),i=a(50627),o=a(7246),s=a(93224),c=a(70189),l=a(59984),d=a(11945),u=a(17599),m=a(84580),p=a(19053),_=a(7906),g=a(11398),b=a(80075),y=a(11273),h=a(18135),v=a(82688),x=a(13344),f=a(92887),w=a(48447),S=a(28242),A=a(42232),k=a(75125),j=a(37039),N=a(79212),C=a(72966),I=a(70636);class P{setProvider(e){this.currentProvider=e}getCurrentProvider(){return this.currentProvider}getAvailableProviders(){return[{id:"openai",name:"OpenAI GPT-4",description:"Advanced reasoning and comprehensive infrastructure knowledge",available:!!this.providers.openai.apiKey,model:this.providers.openai.model},{id:"claude",name:"Claude 3.5 Sonnet",description:"Excellent analysis and detailed infrastructure explanations",available:!!this.providers.claude.apiKey,model:this.providers.claude.model},{id:"claude-code",name:"Claude Code",description:"Specialized for infrastructure code generation and optimization",available:!!this.providers["claude-code"].apiKey,model:this.providers["claude-code"].model}]}async generateInfrastructure(e){try{let n=await fetch("/api/ai/infrastructure/generate",{method:"POST",headers:{"Content-Type":"application/json",...this.getAuthHeader()?{Authorization:this.getAuthHeader()}:{}},body:JSON.stringify({description:e.query,cloud_provider:this.mapProvider(e.preferredProvider||"aws"),ai_provider:this.mapAIProvider(this.currentProvider),requirements:{budget_limit:this.parseBudget(e.estimatedBudget),performance_tier:this.mapComplexity(e.complexity||"intermediate"),security_level:e.includeSecurity?"Enhanced":"Basic",compliance_requirements:[],scaling_requirements:{min_instances:1,max_instances:e.includeMonitoring?10:5,auto_scaling:!0,load_balancing:!0}}})});if(!n.ok)throw Error("Backend API error: ".concat(n.statusText));let a=await n.json();if(!a.success)throw Error(a.error||"Backend API returned error");return this.transformBackendResponse(a.data,e)}catch(n){return console.warn("Backend AI service unavailable, using enhanced mock generation:",n),this.generateMockInfrastructure(e)}}async callOpenAI(e,n,a){return fetch("".concat(a.baseUrl,"/chat/completions"),{method:"POST",headers:{Authorization:"Bearer ".concat(a.apiKey),"Content-Type":"application/json"},body:JSON.stringify({model:a.model,messages:[{role:"system",content:n},{role:"user",content:e}],temperature:a.temperature,max_tokens:a.maxTokens})})}async callClaude(e,n,a){return fetch("".concat(a.baseUrl,"/messages"),{method:"POST",headers:{"x-api-key":a.apiKey,"Content-Type":"application/json","anthropic-version":"2023-06-01"},body:JSON.stringify({model:a.model,max_tokens:a.maxTokens,temperature:a.temperature,system:n,messages:[{role:"user",content:e}]})})}extractContentFromResponse(e){return"openai"===this.currentProvider?e.choices[0].message.content:"claude"===this.currentProvider||"claude-code"===this.currentProvider?e.content[0].text:""}buildPrompt(e){return'\nGenerate production-ready infrastructure code based on this request:\n\nUser Request: "'.concat(e.query,'"\n\nRequirements:\n- Preferred Cloud Provider: ').concat(e.preferredProvider||"best fit","\n- Preferred Format: ").concat(e.preferredFormat||"terraform","\n- Complexity Level: ").concat(e.complexity||"intermediate","\n- Include Monitoring: ").concat(e.includeMonitoring?"Yes":"No","\n- Include Security Best Practices: ").concat(e.includeSecurity?"Yes":"No","\n- Estimated Budget: ").concat(e.estimatedBudget||"Not specified",'\n\nPlease provide:\n1. Complete infrastructure code that is production-ready\n2. Clear explanation of the solution\n3. Best practice recommendations\n4. Security considerations\n5. Cost estimation\n6. Deployment time estimate\n7. Alternative provider suggestions if applicable\n\nFormat the response as JSON with the following structure:\n{\n  "infrastructure": {\n    "code": "...",\n    "format": "...",\n    "provider": "..."\n  },\n  "explanation": "...",\n  "recommendations": ["..."],\n  "estimatedCost": "...",\n  "deploymentTime": "...",\n  "securityConsiderations": ["..."],\n  "alternatives": [{"provider": "...", "rationale": "..."}]\n}\n')}getSystemPrompt(){let e="You are an expert cloud infrastructure architect with deep knowledge of:\n- AWS, Azure, Google Cloud Platform, Kubernetes, IBM Cloud, Oracle Cloud, Alibaba Cloud\n- Infrastructure as Code tools: Terraform, Bicep, CloudFormation, Pulumi, Ansible\n- Security best practices and compliance frameworks (SOC2, ISO27001, GDPR)\n- Cost optimization and resource management\n- DevOps and CI/CD pipelines\n- Container orchestration and microservices\n\nYour goal is to generate production-ready, secure, and cost-effective infrastructure code based on user requirements. Always consider:\n1. Security by design with zero-trust principles\n2. High availability and scalability\n3. Cost optimization and resource efficiency\n4. Best practices for the chosen cloud provider\n5. Monitoring, observability, and alerting\n6. Disaster recovery and backup strategies\n7. Compliance and governance requirements\n\nProvide code that is:\n- Syntactically correct and immediately deployable\n- Following cloud provider best practices and well-architected frameworks\n- Including proper resource naming, tagging, and organization\n- Implementing least privilege access and strong security controls\n- Including comprehensive monitoring, logging, and alerting\n- Optimized for performance and cost\n- Documentation-rich with clear explanations";return"claude-code"===this.currentProvider?e+"\n\n**CODE GENERATION FOCUS:**\nAs a specialized code generation model, prioritize:\n- Clean, maintainable, and well-structured code\n- Comprehensive error handling and validation\n- Detailed inline comments and documentation\n- Modular and reusable infrastructure components\n- Advanced configuration patterns and best practices\n- Performance optimizations and resource efficiency\n- Security hardening and compliance controls":"claude"===this.currentProvider?e+"\n\n**ANALYSIS AND EXPLANATION FOCUS:**\nProvide detailed analysis and comprehensive explanations:\n- Architectural reasoning and design decisions\n- Trade-offs and alternative approaches\n- Security considerations and risk assessments\n- Cost implications and optimization opportunities\n- Operational considerations and maintenance requirements\n- Integration patterns and dependency management":e+"\n\n**COMPREHENSIVE SOLUTION FOCUS:**\nBalance technical depth with practical implementation:\n- Complete end-to-end solutions\n- Clear step-by-step implementation guidance\n- Real-world production considerations\n- Troubleshooting and debugging insights\n- Migration and deployment strategies\n- Scaling and evolution planning"}parseAIResponse(e,n){try{return JSON.parse(e)}catch(a){return{infrastructure:{code:this.extractCodeFromResponse(e),format:n.preferredFormat||"terraform",provider:n.preferredProvider||"aws"},explanation:this.extractExplanationFromResponse(e),recommendations:this.extractRecommendationsFromResponse(e),estimatedCost:"$50-200/month",deploymentTime:"15-30 minutes",securityConsiderations:["Implement least privilege access","Enable encryption at rest and in transit","Configure proper network security groups","Enable audit logging and monitoring"],alternatives:[]}}}async generateMockInfrastructure(e){await new Promise(e=>setTimeout(e,2e3));let n=e.preferredProvider||this.selectOptimalProvider(e.query),a=e.preferredFormat||"terraform";return{infrastructure:{code:this.generateInfrastructureCode(e.query,n,a),format:a,provider:n},explanation:this.generateExplanation(e.query,n),recommendations:this.generateRecommendations(e.query,n),estimatedCost:this.estimateCost(e.query,n),deploymentTime:this.estimateDeploymentTime(e.query),securityConsiderations:this.generateSecurityConsiderations(n),alternatives:this.generateAlternatives(n,e.query)}}selectOptimalProvider(e){let n=e.toLowerCase();return n.includes("lambda")||n.includes("s3")||n.includes("dynamodb")?"aws":n.includes("azure")||n.includes("bicep")||n.includes("app service")?"azure":n.includes("gcp")||n.includes("kubernetes")||n.includes("gke")?"gcp":n.includes("container")||n.includes("microservice")?"kubernetes":"aws"}generateInfrastructureCode(e,n,a){let t=e.toLowerCase();return t.includes("api")||t.includes("rest")||t.includes("endpoint")?this.generateAPIInfrastructure(n,a):t.includes("database")||t.includes("storage")||t.includes("data")?this.generateDatabaseInfrastructure(n,a):t.includes("web")||t.includes("frontend")||t.includes("static")?this.generateWebInfrastructure(n,a):t.includes("ml")||t.includes("ai")||t.includes("machine learning")?this.generateMLInfrastructure(n,a):this.generateFullStackInfrastructure(n,a)}generateAPIInfrastructure(e,n){switch(e){case"aws":default:return this.generateAWSAPIInfrastructure(n);case"azure":return this.generateAzureAPIInfrastructure(n);case"gcp":return this.generateGCPAPIInfrastructure(n)}}generateAWSAPIInfrastructure(e){return"terraform"===e?'# AWS API Gateway with Lambda Backend - Terraform\nterraform {\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.0"\n    }\n  }\n}\n\nvariable "project_name" {\n  description = "Name of the project"\n  type        = string\n  default     = "ai-generated-api"\n}\n\nvariable "environment" {\n  description = "Environment (dev, staging, prod)"\n  type        = string\n  default     = "dev"\n}\n\n# API Gateway\nresource "aws_api_gateway_rest_api" "main" {\n  name        = "${var.project_name}-${var.environment}"\n  description = "AI-generated API Gateway"\n  \n  endpoint_configuration {\n    types = ["REGIONAL"]\n  }\n}\n\n# Lambda Function\nresource "aws_lambda_function" "api_handler" {\n  filename         = "api_handler.zip"\n  function_name    = "${var.project_name}-handler-${var.environment}"\n  role            = aws_iam_role.lambda_role.arn\n  handler         = "index.handler"\n  runtime         = "nodejs18.x"\n  timeout         = 30\n  memory_size     = 256\n  \n  environment {\n    variables = {\n      ENVIRONMENT = var.environment\n      LOG_LEVEL   = "info"\n    }\n  }\n  \n  depends_on = [\n    aws_iam_role_policy_attachment.lambda_logs,\n    aws_cloudwatch_log_group.lambda_logs,\n  ]\n  \n  tags = {\n    Environment = var.environment\n    Project     = var.project_name\n    GeneratedBy = "sirsi-nexus-ai"\n  }\n}\n\n# IAM Role for Lambda\nresource "aws_iam_role" "lambda_role" {\n  name = "${var.project_name}-lambda-role-${var.environment}"\n\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Effect = "Allow"\n        Principal = {\n          Service = "lambda.amazonaws.com"\n        }\n      }\n    ]\n  })\n}\n\n# CloudWatch Log Group\nresource "aws_cloudwatch_log_group" "lambda_logs" {\n  name              = "/aws/lambda/${aws_lambda_function.api_handler.function_name}"\n  retention_in_days = 14\n  \n  tags = {\n    Environment = var.environment\n    Project     = var.project_name\n  }\n}\n\n# IAM policy attachment\nresource "aws_iam_role_policy_attachment" "lambda_logs" {\n  role       = aws_iam_role.lambda_role.name\n  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"\n}\n\n# API Gateway Resource\nresource "aws_api_gateway_resource" "api_resource" {\n  rest_api_id = aws_api_gateway_rest_api.main.id\n  parent_id   = aws_api_gateway_rest_api.main.root_resource_id\n  path_part   = "api"\n}\n\n# API Gateway Method\nresource "aws_api_gateway_method" "api_method" {\n  rest_api_id   = aws_api_gateway_rest_api.main.id\n  resource_id   = aws_api_gateway_resource.api_resource.id\n  http_method   = "ANY"\n  authorization = "NONE"\n}\n\n# API Gateway Integration\nresource "aws_api_gateway_integration" "lambda_integration" {\n  rest_api_id = aws_api_gateway_rest_api.main.id\n  resource_id = aws_api_gateway_resource.api_resource.id\n  http_method = aws_api_gateway_method.api_method.http_method\n\n  integration_http_method = "POST"\n  type                   = "AWS_PROXY"\n  uri                    = aws_lambda_function.api_handler.invoke_arn\n}\n\n# Lambda permission for API Gateway\nresource "aws_lambda_permission" "api_gw" {\n  statement_id  = "AllowExecutionFromAPIGateway"\n  action        = "lambda:InvokeFunction"\n  function_name = aws_lambda_function.api_handler.function_name\n  principal     = "apigateway.amazonaws.com"\n  source_arn    = "${aws_api_gateway_rest_api.main.execution_arn}/*/*"\n}\n\n# API Gateway Deployment\nresource "aws_api_gateway_deployment" "main" {\n  depends_on = [\n    aws_api_gateway_method.api_method,\n    aws_api_gateway_integration.lambda_integration,\n  ]\n\n  rest_api_id = aws_api_gateway_rest_api.main.id\n  stage_name  = var.environment\n}\n\n# Outputs\noutput "api_endpoint" {\n  description = "API Gateway endpoint URL"\n  value       = aws_api_gateway_deployment.main.invoke_url\n}\n\noutput "lambda_function_name" {\n  description = "Lambda function name"\n  value       = aws_lambda_function.api_handler.function_name\n}':"# Infrastructure code will be generated here"}generateAzureAPIInfrastructure(e){return"# Azure API infrastructure code"}generateGCPAPIInfrastructure(e){return"# GCP API infrastructure code"}generateDatabaseInfrastructure(e,n){return"# Database infrastructure code"}generateWebInfrastructure(e,n){return"# Web infrastructure code"}generateMLInfrastructure(e,n){return"# ML infrastructure code"}generateFullStackInfrastructure(e,n){return"# Full-stack infrastructure code"}generateExplanation(e,n){return'Based on your request "'.concat(e,"\", I've generated a comprehensive ").concat(n.toUpperCase()," infrastructure solution. This includes production-ready components with security best practices, monitoring, and scalability considerations.")}generateRecommendations(e,n){return["Enable monitoring and alerting for all resources","Implement proper backup and disaster recovery strategies","Add WAF protection for public-facing endpoints","Configure auto-scaling based on demand","Set up proper logging and audit trails","Implement cost optimization with resource scheduling"]}estimateCost(e,n){let a=e.toLowerCase();return a.includes("enterprise")||a.includes("production")?"$200-800/month":a.includes("simple")||a.includes("basic")?"$20-80/month":"$50-250/month"}estimateDeploymentTime(e){let n=e.toLowerCase();return n.includes("complex")||n.includes("enterprise")?"45-90 minutes":n.includes("simple")||n.includes("basic")?"5-15 minutes":"15-30 minutes"}generateSecurityConsiderations(e){return["Enable encryption at rest and in transit","Implement least privilege access control","Configure proper network security groups","Enable audit logging and monitoring","Set up vulnerability scanning","Implement secrets management"]}generateAlternatives(e,n){let a=[];return"aws"!==e&&a.push({provider:"aws",rationale:"Mature ecosystem with extensive service offerings"}),"azure"!==e&&a.push({provider:"azure",rationale:"Strong integration with Microsoft ecosystem"}),"gcp"!==e&&a.push({provider:"gcp",rationale:"Advanced AI/ML capabilities and competitive pricing"}),a.slice(0,2)}getAuthHeader(){{let e=localStorage.getItem("auth_token");return e?"Bearer ".concat(e):null}}mapProvider(e){return({aws:"AWS",azure:"Azure",gcp:"GCP",kubernetes:"Kubernetes",multi:"AWS",ibm:"IBM",oracle:"Oracle",alibaba:"Alibaba"})[e]||"AWS"}mapAIProvider(e){return({openai:"OpenAI",claude:"Claude3_5Sonnet","claude-code":"ClaudeCode"})[e]||"OpenAI"}mapComplexity(e){return({basic:"Basic",intermediate:"Standard",advanced:"Premium"})[e]||"Standard"}parseBudget(e){if(!e)return null;let n=e.match(/\$?(\d+)/);return n?parseInt(n[1]):null}transformBackendResponse(e,n){var a;return{infrastructure:{code:e.template||"# Generated infrastructure template",format:(null==(a=e.template_type)?void 0:a.toLowerCase())||n.preferredFormat||"terraform",provider:n.preferredProvider||"aws"},explanation:this.generateExplanationFromBackend(e,n),recommendations:e.optimization_suggestions||["Follow cloud provider best practices","Enable monitoring and alerting","Implement proper security controls"],estimatedCost:e.estimated_cost?"$".concat(e.estimated_cost,"/month"):"$50-200/month",deploymentTime:this.estimateDeploymentTimeFromTemplate(e.template),securityConsiderations:e.security_recommendations||["Enable encryption at rest and in transit","Implement least privilege access control","Configure proper network security groups","Enable audit logging and monitoring"],alternatives:this.generateAlternatives(n.preferredProvider||"aws",n.query)}}generateExplanationFromBackend(e,n){if(e.explanation)return e.explanation;let a=n.preferredProvider||"aws",t=e.confidence_score?Math.round(100*e.confidence_score):85;return'Based on your request "'.concat(n.query,"\", I've generated a comprehensive ").concat(a.toUpperCase()," infrastructure solution using AI with ").concat(t,"% confidence. This includes production-ready components with security best practices, monitoring, and scalability considerations.")}estimateDeploymentTimeFromTemplate(e){if(!e)return"15-30 minutes";let n=e.split("\n").length;return n>200?"45-90 minutes":n<50?"5-15 minutes":"15-30 minutes"}extractCodeFromResponse(e){let n=e.match(/```[\w]*\n([\s\S]*?)\n```/);return n?n[1]:e}extractExplanationFromResponse(e){return e.split("\n").find(e=>e.toLowerCase().includes("explanation")||e.toLowerCase().includes("solution"))||"AI-generated infrastructure solution"}extractRecommendationsFromResponse(e){let n=[];for(let a of e.split("\n"))(a.match(/^[-*•]\s/)||a.match(/^\d+\.\s/))&&n.push(a.replace(/^[-*•]\s|^\d+\.\s/,"").trim());return n.length>0?n:["Follow cloud provider best practices","Implement proper monitoring and alerting","Enable security best practices"]}constructor(){this.currentProvider="openai",this.providers={openai:{apiKey:I.env.NEXT_PUBLIC_OPENAI_API_KEY||"",baseUrl:"https://api.openai.com/v1",model:"gpt-4",maxTokens:4e3,temperature:.7},claude:{apiKey:I.env.NEXT_PUBLIC_ANTHROPIC_API_KEY||"",baseUrl:"https://api.anthropic.com/v1",model:"claude-3-5-sonnet-20241022",maxTokens:4e3,temperature:.7},"claude-code":{apiKey:I.env.NEXT_PUBLIC_ANTHROPIC_API_KEY||"",baseUrl:"https://api.anthropic.com/v1",model:"claude-3-5-sonnet-20241022",maxTokens:8e3,temperature:.3}}}}let E=new P;var T=a(30771),z=a(49643);let R=e=>{switch(e){case"openai":default:return T.A;case"claude":return g.A;case"claude-code":return s.A}},D=(e,n)=>({openai:n?"from-green-500/20 to-emerald-500/20 border-green-500/30":"from-green-100 to-emerald-100 border-green-300",claude:n?"from-purple-500/20 to-violet-500/20 border-purple-500/30":"from-purple-100 to-violet-100 border-purple-300","claude-code":n?"from-blue-500/20 to-cyan-500/20 border-blue-500/30":"from-blue-100 to-cyan-100 border-blue-300"})[e],O=e=>{let{onProviderChange:n,isDarkMode:a=!1}=e,[i,o]=(0,r.useState)(!1),[s,c]=(0,r.useState)([]),[l,d]=(0,r.useState)("openai");(0,r.useEffect)(()=>{c(E.getAvailableProviders()),d(E.getCurrentProvider())},[]);let u=e=>{d(e),E.setProvider(e),o(!1),null==n||n(e)},m=s.find(e=>e.id===l),p=s.filter(e=>e.available).length>0,_=a?{bg:"bg-slate-800",border:"border-slate-600",text:"text-slate-100",textSecondary:"text-slate-300",hover:"hover:bg-slate-700",dropdown:"bg-slate-800 border-slate-600",shadow:"shadow-xl shadow-black/20"}:{bg:"bg-white dark:bg-gray-800",border:"border-gray-200 dark:border-gray-700",text:"text-gray-900 dark:text-gray-100",textSecondary:"text-gray-600 dark:text-gray-400",hover:"hover:bg-gray-50 dark:bg-gray-900",dropdown:"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700",shadow:"shadow-lg"};return p?(0,t.jsxs)("div",{className:"relative inline-block",children:[(0,t.jsx)("button",{onClick:()=>o(!i),className:"flex items-center space-x-2 px-3 py-2 rounded-lg border transition-all duration-200 ".concat(_.bg," ").concat(_.border," ").concat(_.hover," ").concat(_.text),children:m&&(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("div",{className:"w-8 h-8 rounded-lg bg-gradient-to-br ".concat(D(m.id,a)," border flex items-center justify-center"),children:r.createElement(R(m.id),{className:"w-4 h-4"})}),(0,t.jsxs)("div",{className:"flex flex-col items-start",children:[(0,t.jsx)("span",{className:"text-sm font-medium",children:m.name}),(0,t.jsx)("span",{className:"text-xs ".concat(_.textSecondary),children:m.model})]}),(0,t.jsx)(y.A,{className:"w-4 h-4 transition-transform ".concat(i?"rotate-180":"")})]})}),i&&(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("div",{className:"fixed inset-0 z-10",onClick:()=>o(!1)}),(0,t.jsxs)("div",{className:"absolute top-full left-0 mt-2 w-80 ".concat(_.dropdown," border rounded-lg ").concat(_.shadow," z-20"),children:[(0,t.jsxs)("div",{className:"p-3 border-b ".concat(_.border),children:[(0,t.jsx)("h3",{className:"text-sm font-semibold ".concat(_.text),children:"Select AI Provider"}),(0,t.jsx)("p",{className:"text-xs ".concat(_.textSecondary," mt-1"),children:"Choose your preferred AI engine for infrastructure generation"})]}),(0,t.jsx)("div",{className:"py-2 max-h-64 overflow-y-auto",children:s.map(e=>{let n=R(e.id),r=e.id===l,i=e.available;return(0,t.jsx)("button",{onClick:()=>i&&u(e.id),disabled:!i,className:"w-full px-3 py-3 text-left transition-colors ".concat(i?_.hover:"opacity-50 cursor-not-allowed"," ").concat(r?a?"bg-slate-700":"bg-gray-100 dark:bg-gray-800":""),children:(0,t.jsxs)("div",{className:"flex items-center space-x-3",children:[(0,t.jsx)("div",{className:"w-10 h-10 rounded-lg bg-gradient-to-br ".concat(D(e.id,a)," border flex items-center justify-center"),children:(0,t.jsx)(n,{className:"w-5 h-5"})}),(0,t.jsxs)("div",{className:"flex-1 min-w-0",children:[(0,t.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,t.jsx)("span",{className:"text-sm font-medium ".concat(_.text),children:e.name}),r&&(0,t.jsx)(S.A,{className:"w-4 h-4 text-emerald-500"}),!i&&(0,t.jsx)(A.A,{className:"w-4 h-4 text-amber-500"})]}),(0,t.jsx)("p",{className:"text-xs ".concat(_.textSecondary," mt-1 line-clamp-2"),children:e.description}),(0,t.jsx)("p",{className:"text-xs ".concat(_.textSecondary," mt-1 font-mono"),children:e.model})]})]})},e.id)})}),(0,t.jsx)("div",{className:"p-3 border-t ".concat(_.border),children:(0,t.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,t.jsx)(z.A,{className:"w-4 h-4 text-blue-500"}),(0,t.jsx)("span",{className:"text-xs ".concat(_.textSecondary),children:"Each provider offers unique strengths for different use cases"})]})})]})]})]}):(0,t.jsx)("div",{className:"relative inline-block ".concat(_.bg," ").concat(_.border," border rounded-lg px-3 py-2"),children:(0,t.jsxs)("div",{className:"flex items-center space-x-2",children:[(0,t.jsx)(A.A,{className:"w-4 h-4 text-amber-500"}),(0,t.jsx)("span",{className:"text-sm ".concat(_.textSecondary),children:"No AI providers configured"}),(0,t.jsxs)("div",{className:"group relative",children:[(0,t.jsx)(z.A,{className:"w-4 h-4 text-gray-400 cursor-help"}),(0,t.jsxs)("div",{className:"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 w-64 p-2 text-xs ".concat(_.dropdown," ").concat(_.border," border rounded-lg ").concat(_.shadow," opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none"),children:["Configure API keys in environment variables:",(0,t.jsx)("br",{}),"• NEXT_PUBLIC_OPENAI_API_KEY",(0,t.jsx)("br",{}),"• NEXT_PUBLIC_ANTHROPIC_API_KEY"]})]})]})})},$=[{id:"serverless-api",name:"Serverless API Gateway",description:"High-performance serverless API with authentication and auto-scaling",category:"api",provider:"aws",formats:["terraform","cloudformation","pulumi"],complexity:"intermediate",estimatedCost:"$50-200/month",deploymentTime:"15-30 minutes",tags:["serverless","api-gateway","lambda","cognito","dynamodb"],content:{terraform:'# AWS Terraform configuration for serverless API\nprovider "aws" {\n  region = var.aws_region\n}\n\nvariable "aws_region" {\n  description = "AWS region"\n  type        = string\n  default     = "us-east-1"\n}\n\nvariable "api_name" {\n  description = "Name of the API"\n  type        = string\n  default     = "my-serverless-api"\n}\n\n# API Gateway REST API\nresource "aws_api_gateway_rest_api" "main" {\n  name        = var.api_name\n  description = "Serverless API with Lambda integration"\n  \n  endpoint_configuration {\n    types = ["REGIONAL"]\n  }\n}\n\n# Lambda function\nresource "aws_lambda_function" "api_handler" {\n  filename         = "api_handler.zip"\n  function_name    = "${var.api_name}-handler"\n  role            = aws_iam_role.lambda_role.arn\n  handler         = "index.handler"\n  runtime         = "nodejs18.x"\n  \n  depends_on = [\n    aws_iam_role_policy_attachment.lambda_logs,\n    aws_cloudwatch_log_group.lambda_logs,\n  ]\n}\n\n# DynamoDB Table\nresource "aws_dynamodb_table" "main" {\n  name           = "${var.api_name}-data"\n  billing_mode   = "PAY_PER_REQUEST"\n  hash_key       = "id"\n  \n  attribute {\n    name = "id"\n    type = "S"\n  }\n  \n  point_in_time_recovery {\n    enabled = true\n  }\n  \n  tags = {\n    Environment = "production"\n    Generated   = "sirsi-nexus"\n  }\n}\n\n# Cognito User Pool\nresource "aws_cognito_user_pool" "main" {\n  name = "${var.api_name}-users"\n  \n  password_policy {\n    minimum_length    = 8\n    require_lowercase = true\n    require_numbers   = true\n    require_symbols   = true\n    require_uppercase = true\n  }\n  \n  auto_verified_attributes = ["email"]\n}\n\n# IAM Role for Lambda\nresource "aws_iam_role" "lambda_role" {\n  name = "${var.api_name}-lambda-role"\n\n  assume_role_policy = jsonencode({\n    Version = "2012-10-17"\n    Statement = [\n      {\n        Action = "sts:AssumeRole"\n        Effect = "Allow"\n        Principal = {\n          Service = "lambda.amazonaws.com"\n        }\n      }\n    ]\n  })\n}\n\n# CloudWatch Log Group\nresource "aws_cloudwatch_log_group" "lambda_logs" {\n  name              = "/aws/lambda/${aws_lambda_function.api_handler.function_name}"\n  retention_in_days = 14\n}\n\n# IAM policy attachment\nresource "aws_iam_role_policy_attachment" "lambda_logs" {\n  role       = aws_iam_role.lambda_role.name\n  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"\n}\n\n# Output the API endpoint\noutput "api_endpoint" {\n  description = "API Gateway endpoint URL"\n  value       = aws_api_gateway_rest_api.main.execution_arn\n}\n\noutput "user_pool_id" {\n  description = "Cognito User Pool ID"\n  value       = aws_cognito_user_pool.main.id\n}',cloudformation:"AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Serverless API with Lambda, API Gateway, and DynamoDB'\n\nParameters:\n  ApiName:\n    Type: String\n    Default: my-serverless-api\n    Description: Name of the API\n\nResources:\n  # API Gateway\n  ApiGateway:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Ref ApiName\n      Description: Serverless API with Lambda integration\n      EndpointConfiguration:\n        Types:\n          - REGIONAL\n\n  # Lambda Function\n  LambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub '${ApiName}-handler'\n      Runtime: nodejs18.x\n      Handler: index.handler\n      Role: !GetAtt LambdaRole.Arn\n      Code:\n        ZipFile: |\n          exports.handler = async (event) => {\n            return {\n              statusCode: 200,\n              body: JSON.stringify({ message: 'Hello from Lambda!' })\n            };\n          };\n\n  # DynamoDB Table\n  DynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      TableName: !Sub '${ApiName}-data'\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: id\n          AttributeType: S\n      KeySchema:\n        - AttributeName: id\n          KeyType: HASH\n      PointInTimeRecoverySpecification:\n        PointInTimeRecoveryEnabled: true\n\n  # Cognito User Pool\n  UserPool:\n    Type: AWS::Cognito::UserPool\n    Properties:\n      UserPoolName: !Sub '${ApiName}-users'\n      AutoVerifiedAttributes:\n        - email\n      Policies:\n        PasswordPolicy:\n          MinimumLength: 8\n          RequireLowercase: true\n          RequireNumbers: true\n          RequireSymbols: true\n          RequireUppercase: true\n\n  # IAM Role for Lambda\n  LambdaRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n\nOutputs:\n  ApiEndpoint:\n    Description: API Gateway endpoint URL\n    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'\n  \n  UserPoolId:\n    Description: Cognito User Pool ID\n    Value: !Ref UserPool"},variables:{aws_region:"us-east-1",api_name:"my-serverless-api"}},{id:"k8s-microservices",name:"Kubernetes Microservices",description:"Production-ready Kubernetes cluster with microservices architecture",category:"compute",provider:"kubernetes",formats:["yaml","terraform","ansible"],complexity:"advanced",estimatedCost:"$300-800/month",deploymentTime:"45-90 minutes",tags:["kubernetes","microservices","ingress","monitoring","scaling"],content:{yaml:'# Kubernetes Microservices Deployment\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: microservices\n  labels:\n    name: microservices\n---\n# API Service Deployment\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-service\n  namespace: microservices\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: api-service\n  template:\n    metadata:\n      labels:\n        app: api-service\n    spec:\n      containers:\n      - name: api\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            memory: "64Mi"\n            cpu: "250m"\n          limits:\n            memory: "128Mi"\n            cpu: "500m"\n---\n# API Service\napiVersion: v1\nkind: Service\nmetadata:\n  name: api-service\n  namespace: microservices\nspec:\n  selector:\n    app: api-service\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: ClusterIP\n---\n# Ingress Controller\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: microservices-ingress\n  namespace: microservices\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\nspec:\n  tls:\n  - hosts:\n    - api.yourdomain.com\n    secretName: api-tls\n  rules:\n  - host: api.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: api-service\n            port:\n              number: 80\n---\n# Horizontal Pod Autoscaler\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: api-service-hpa\n  namespace: microservices\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: api-service\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80'}},{id:"azure-webapp",name:"Azure Web App with Database",description:"Scalable Azure web application with SQL database and Application Insights",category:"compute",provider:"azure",formats:["bicep","terraform","ansible"],complexity:"intermediate",estimatedCost:"$100-300/month",deploymentTime:"20-40 minutes",tags:["azure","webapp","sql","monitoring","scaling"],content:{bicep:"// Azure Web App with SQL Database\n@description('The name of the web app')\nparam webAppName string = 'mywebapp${uniqueString(resourceGroup().id)}'\n\n@description('The location for all resources')\nparam location string = resourceGroup().location\n\n@description('The SKU of the app service plan')\nparam skuName string = 'B1'\n\n@description('The runtime stack for the web app')\nparam linuxFxVersion string = 'DOTNETCORE|6.0'\n\n// App Service Plan\nresource appServicePlan 'Microsoft.Web/serverfarms@2022-03-01' = {\n  name: '${webAppName}-plan'\n  location: location\n  kind: 'linux'\n  properties: {\n    reserved: true\n  }\n  sku: {\n    name: skuName\n  }\n}\n\n// Web App\nresource webApp 'Microsoft.Web/sites@2022-03-01' = {\n  name: webAppName\n  location: location\n  properties: {\n    serverFarmId: appServicePlan.id\n    siteConfig: {\n      linuxFxVersion: linuxFxVersion\n      ftpsState: 'Disabled'\n      minTlsVersion: '1.2'\n      appSettings: [\n        {\n          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'\n          value: applicationInsights.properties.InstrumentationKey\n        }\n        {\n          name: 'ApplicationInsightsAgent_EXTENSION_VERSION'\n          value: '~3'\n        }\n      ]\n    }\n    httpsOnly: true\n  }\n}\n\n// SQL Server\nresource sqlServer 'Microsoft.Sql/servers@2022-05-01-preview' = {\n  name: '${webAppName}-sql'\n  location: location\n  properties: {\n    administratorLogin: 'sqladmin'\n    administratorLoginPassword: 'P@ssw0rd123!'\n    version: '12.0'\n  }\n}\n\n// SQL Database\nresource sqlDatabase 'Microsoft.Sql/servers/databases@2022-05-01-preview' = {\n  parent: sqlServer\n  name: '${webAppName}-db'\n  location: location\n  sku: {\n    name: 'Basic'\n    tier: 'Basic'\n    capacity: 5\n  }\n  properties: {\n    collation: 'SQL_Latin1_General_CP1_CI_AS'\n    maxSizeBytes: 2147483648\n  }\n}\n\n// Application Insights\nresource applicationInsights 'Microsoft.Insights/components@2020-02-02' = {\n  name: '${webAppName}-insights'\n  location: location\n  kind: 'web'\n  properties: {\n    Application_Type: 'web'\n    Request_Source: 'rest'\n  }\n}\n\n// Outputs\noutput webAppUrl string = 'https://${webApp.properties.defaultHostName}'\noutput sqlServerName string = sqlServer.name\noutput databaseName string = sqlDatabase.name",terraform:'# Azure Web App with SQL Database\nterraform {\n  required_providers {\n    azurerm = {\n      source  = "hashicorp/azurerm"\n      version = "~>3.0"\n    }\n  }\n}\n\nprovider "azurerm" {\n  features {}\n}\n\nvariable "resource_group_name" {\n  description = "Name of the resource group"\n  type        = string\n  default     = "rg-webapp"\n}\n\nvariable "location" {\n  description = "Location for all resources"\n  type        = string\n  default     = "East US"\n}\n\nvariable "app_name" {\n  description = "Name of the web app"\n  type        = string\n  default     = "mywebapp"\n}\n\n# Resource Group\nresource "azurerm_resource_group" "main" {\n  name     = var.resource_group_name\n  location = var.location\n}\n\n# App Service Plan\nresource "azurerm_service_plan" "main" {\n  name                = "${var.app_name}-plan"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n  os_type             = "Linux"\n  sku_name            = "B1"\n}\n\n# Web App\nresource "azurerm_linux_web_app" "main" {\n  name                = "${var.app_name}-${random_string.suffix.result}"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_service_plan.main.location\n  service_plan_id     = azurerm_service_plan.main.id\n\n  site_config {\n    application_stack {\n      dotnet_version = "6.0"\n    }\n    \n    ftps_state = "Disabled"\n    minimum_tls_version = "1.2"\n  }\n\n  app_settings = {\n    "APPINSIGHTS_INSTRUMENTATIONKEY" = azurerm_application_insights.main.instrumentation_key\n    "ApplicationInsightsAgent_EXTENSION_VERSION" = "~3"\n  }\n\n  https_only = true\n}\n\n# Random string for unique naming\nresource "random_string" "suffix" {\n  length  = 8\n  special = false\n  upper   = false\n}\n\n# SQL Server\nresource "azurerm_mssql_server" "main" {\n  name                         = "${var.app_name}-sql-${random_string.suffix.result}"\n  resource_group_name          = azurerm_resource_group.main.name\n  location                     = azurerm_resource_group.main.location\n  version                      = "12.0"\n  administrator_login          = "sqladmin"\n  administrator_login_password = "P@ssw0rd123!"\n}\n\n# SQL Database\nresource "azurerm_mssql_database" "main" {\n  name           = "${var.app_name}-db"\n  server_id      = azurerm_mssql_server.main.id\n  collation      = "SQL_Latin1_General_CP1_CI_AS"\n  license_type   = "LicenseIncluded"\n  max_size_gb    = 2\n  sku_name       = "Basic"\n  zone_redundant = false\n}\n\n# Application Insights\nresource "azurerm_application_insights" "main" {\n  name                = "${var.app_name}-insights"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  application_type    = "web"\n}\n\n# Outputs\noutput "web_app_url" {\n  description = "URL of the web app"\n  value       = "https://${azurerm_linux_web_app.main.default_hostname}"\n}\n\noutput "sql_server_name" {\n  description = "SQL Server name"\n  value       = azurerm_mssql_server.main.name\n}\n\noutput "database_name" {\n  description = "Database name"\n  value       = azurerm_mssql_database.main.name\n}'},variables:{resource_group_name:"rg-webapp",location:"East US",app_name:"mywebapp"}},{id:"gcp-gke-cluster",name:"Google Kubernetes Engine Cluster",description:"Production-ready GKE cluster with node pools and monitoring",category:"compute",provider:"gcp",formats:["terraform","yaml","ansible"],complexity:"advanced",estimatedCost:"$200-600/month",deploymentTime:"30-60 minutes",tags:["gcp","kubernetes","gke","monitoring","autoscaling"],content:{terraform:'# Google Kubernetes Engine Cluster\nterraform {\n  required_providers {\n    google = {\n      source  = "hashicorp/google"\n      version = "~> 4.0"\n    }\n  }\n}\n\nprovider "google" {\n  project = var.project_id\n  region  = var.region\n}\n\nvariable "project_id" {\n  description = "GCP Project ID"\n  type        = string\n}\n\nvariable "region" {\n  description = "GCP region"\n  type        = string\n  default     = "us-central1"\n}\n\nvariable "cluster_name" {\n  description = "Name of the GKE cluster"\n  type        = string\n  default     = "my-gke-cluster"\n}\n\n# VPC Network\nresource "google_compute_network" "vpc" {\n  name                    = "${var.cluster_name}-vpc"\n  auto_create_subnetworks = false\n}\n\n# Subnet\nresource "google_compute_subnetwork" "subnet" {\n  name          = "${var.cluster_name}-subnet"\n  ip_cidr_range = "10.0.0.0/24"\n  region        = var.region\n  network       = google_compute_network.vpc.name\n\n  secondary_ip_range {\n    range_name    = "services-range"\n    ip_cidr_range = "192.168.1.0/24"\n  }\n\n  secondary_ip_range {\n    range_name    = "pod-ranges"\n    ip_cidr_range = "192.168.64.0/22"\n  }\n}\n\n# GKE Cluster\nresource "google_container_cluster" "primary" {\n  name     = var.cluster_name\n  location = var.region\n\n  # We can\'t create a cluster with no node pool defined, but we want to only use\n  # separately managed node pools. So we create the smallest possible default\n  # node pool and immediately delete it.\n  remove_default_node_pool = true\n  initial_node_count       = 1\n\n  network    = google_compute_network.vpc.name\n  subnetwork = google_compute_subnetwork.subnet.name\n\n  ip_allocation_policy {\n    cluster_secondary_range_name  = "pod-ranges"\n    services_secondary_range_name = "services-range"\n  }\n\n  # Enable network policy\n  network_policy {\n    enabled = true\n  }\n\n  # Enable monitoring and logging\n  monitoring_config {\n    enable_components = ["SYSTEM_COMPONENTS", "WORKLOADS"]\n  }\n\n  logging_config {\n    enable_components = ["SYSTEM_COMPONENTS", "WORKLOADS"]\n  }\n\n  # Enable autopilot features\n  cluster_autoscaling {\n    enabled = true\n    resource_limits {\n      resource_type = "cpu"\n      minimum       = 1\n      maximum       = 100\n    }\n    resource_limits {\n      resource_type = "memory"\n      minimum       = 1\n      maximum       = 100\n    }\n  }\n}\n\n# Node Pool\nresource "google_container_node_pool" "primary_nodes" {\n  name       = "${var.cluster_name}-node-pool"\n  location   = var.region\n  cluster    = google_container_cluster.primary.name\n  node_count = 1\n\n  autoscaling {\n    min_node_count = 1\n    max_node_count = 10\n  }\n\n  node_config {\n    preemptible  = false\n    machine_type = "e2-medium"\n\n    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.\n    service_account = google_service_account.default.email\n    oauth_scopes = [\n      "https://www.googleapis.com/auth/cloud-platform"\n    ]\n\n    labels = {\n      env = "production"\n    }\n\n    tags = ["gke-node", "${var.cluster_name}-node"]\n    metadata = {\n      disable-legacy-endpoints = "true"\n    }\n  }\n}\n\n# Service Account for nodes\nresource "google_service_account" "default" {\n  account_id   = "${var.cluster_name}-sa"\n  display_name = "${var.cluster_name} Service Account"\n}\n\n# IAM binding for service account\nresource "google_project_iam_member" "default" {\n  project = var.project_id\n  role    = "roles/container.nodeServiceAccount"\n  member  = "serviceAccount:${google_service_account.default.email}"\n}\n\n# Outputs\noutput "kubernetes_cluster_name" {\n  value       = google_container_cluster.primary.name\n  description = "GKE Cluster Name"\n}\n\noutput "kubernetes_cluster_host" {\n  value       = google_container_cluster.primary.endpoint\n  description = "GKE Cluster Host"\n  sensitive   = true\n}\n\noutput "region" {\n  value       = var.region\n  description = "GCloud Region"\n}'},variables:{project_id:"my-gcp-project",region:"us-central1",cluster_name:"my-gke-cluster"}},{id:"multi-cloud-storage",name:"Multi-Cloud Storage Solution",description:"Unified storage solution across AWS S3, Azure Blob, and GCP Cloud Storage",category:"storage",provider:"multi",formats:["terraform","ansible"],complexity:"advanced",estimatedCost:"$20-100/month",deploymentTime:"25-45 minutes",tags:["multi-cloud","storage","s3","blob","cloud-storage"],content:{terraform:'# Multi-Cloud Storage Solution\nterraform {\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 5.0"\n    }\n    azurerm = {\n      source  = "hashicorp/azurerm"\n      version = "~> 3.0"\n    }\n    google = {\n      source  = "hashicorp/google"\n      version = "~> 4.0"\n    }\n  }\n}\n\n# Variables\nvariable "project_name" {\n  description = "Name of the project"\n  type        = string\n  default     = "multicloud-storage"\n}\n\nvariable "aws_region" {\n  description = "AWS region"\n  type        = string\n  default     = "us-east-1"\n}\n\nvariable "azure_location" {\n  description = "Azure location"\n  type        = string\n  default     = "East US"\n}\n\nvariable "gcp_region" {\n  description = "GCP region"\n  type        = string\n  default     = "us-central1"\n}\n\nvariable "gcp_project_id" {\n  description = "GCP Project ID"\n  type        = string\n}\n\n# Provider configurations\nprovider "aws" {\n  region = var.aws_region\n}\n\nprovider "azurerm" {\n  features {}\n}\n\nprovider "google" {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n}\n\n# AWS S3 Bucket\nresource "aws_s3_bucket" "main" {\n  bucket = "${var.project_name}-aws-${random_string.suffix.result}"\n}\n\nresource "aws_s3_bucket_versioning" "main" {\n  bucket = aws_s3_bucket.main.id\n  versioning_configuration {\n    status = "Enabled"\n  }\n}\n\nresource "aws_s3_bucket_server_side_encryption_configuration" "main" {\n  bucket = aws_s3_bucket.main.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      sse_algorithm = "AES256"\n    }\n  }\n}\n\n# Azure Storage Account\nresource "azurerm_resource_group" "main" {\n  name     = "${var.project_name}-rg"\n  location = var.azure_location\n}\n\nresource "azurerm_storage_account" "main" {\n  name                     = "${replace(var.project_name, "-", "")}${random_string.suffix.result}"\n  resource_group_name      = azurerm_resource_group.main.name\n  location                 = azurerm_resource_group.main.location\n  account_tier             = "Standard"\n  account_replication_type = "LRS"\n  \n  blob_properties {\n    versioning_enabled = true\n  }\n}\n\nresource "azurerm_storage_container" "main" {\n  name                  = "data"\n  storage_account_name  = azurerm_storage_account.main.name\n  container_access_type = "private"\n}\n\n# GCP Cloud Storage Bucket\nresource "google_storage_bucket" "main" {\n  name     = "${var.project_name}-gcp-${random_string.suffix.result}"\n  location = var.gcp_region\n\n  versioning {\n    enabled = true\n  }\n\n  encryption {\n    default_kms_key_name = google_kms_crypto_key.bucket_key.id\n  }\n}\n\n# GCP KMS for encryption\nresource "google_kms_key_ring" "bucket_keyring" {\n  name     = "${var.project_name}-keyring"\n  location = "global"\n}\n\nresource "google_kms_crypto_key" "bucket_key" {\n  name     = "${var.project_name}-key"\n  key_ring = google_kms_key_ring.bucket_keyring.id\n}\n\n# Random string for unique naming\nresource "random_string" "suffix" {\n  length  = 8\n  special = false\n  upper   = false\n}\n\n# Outputs\noutput "aws_bucket_name" {\n  description = "AWS S3 bucket name"\n  value       = aws_s3_bucket.main.bucket\n}\n\noutput "azure_storage_account" {\n  description = "Azure storage account name"\n  value       = azurerm_storage_account.main.name\n}\n\noutput "gcp_bucket_name" {\n  description = "GCP Cloud Storage bucket name"\n  value       = google_storage_bucket.main.name\n}',ansible:'---\n# Multi-Cloud Storage Playbook\n- name: Deploy Multi-Cloud Storage Solution\n  hosts: localhost\n  gather_facts: false\n  vars:\n    project_name: "multicloud-storage"\n    aws_region: "us-east-1"\n    azure_location: "East US"\n    gcp_region: "us-central1"\n    random_suffix: "{{ ansible_date_time.epoch[-8:] }}"\n\n  tasks:\n    # AWS S3 Bucket\n    - name: Create AWS S3 bucket\n      amazon.aws.s3_bucket:\n        name: "{{ project_name }}-aws-{{ random_suffix }}"\n        region: "{{ aws_region }}"\n        versioning: true\n        encryption: "AES256"\n        state: present\n      register: aws_bucket\n\n    # Azure Storage Account\n    - name: Create Azure Resource Group\n      azure.azcollection.azure_rm_resourcegroup:\n        name: "{{ project_name }}-rg"\n        location: "{{ azure_location }}"\n        state: present\n\n    - name: Create Azure Storage Account\n      azure.azcollection.azure_rm_storageaccount:\n        resource_group: "{{ project_name }}-rg"\n        name: "{{ project_name | replace(\'-\', \'\') }}{{ random_suffix }}"\n        account_type: Standard_LRS\n        location: "{{ azure_location }}"\n        blob_cors:\n          - allowed_origins:\n              - "*"\n            allowed_methods:\n              - GET\n              - POST\n            allowed_headers:\n              - "*"\n            exposed_headers:\n              - "*"\n            max_age_in_seconds: 3600\n        state: present\n      register: azure_storage\n\n    - name: Create Azure Blob Container\n      azure.azcollection.azure_rm_storageblob:\n        resource_group: "{{ project_name }}-rg"\n        storage_account_name: "{{ azure_storage.state.name }}"\n        container: data\n        public_access: None\n        state: present\n\n    # GCP Cloud Storage\n    - name: Create GCP Storage Bucket\n      google.cloud.gcp_storage_bucket:\n        name: "{{ project_name }}-gcp-{{ random_suffix }}"\n        location: "{{ gcp_region }}"\n        versioning:\n          enabled: true\n        encryption:\n          default_kms_key_name: "projects/{{ gcp_project_id }}/locations/global/keyRings/{{ project_name }}-keyring/cryptoKeys/{{ project_name }}-key"\n        state: present\n      register: gcp_bucket\n\n    # Output results\n    - name: Display created resources\n      debug:\n        msg:\n          - "AWS S3 Bucket: {{ aws_bucket.name }}"\n          - "Azure Storage Account: {{ azure_storage.state.name }}"\n          - "GCP Storage Bucket: {{ gcp_bucket.name }}"\n          - "Multi-cloud storage solution deployed successfully!"'},variables:{project_name:"multicloud-storage",aws_region:"us-east-1",azure_location:"East US",gcp_region:"us-central1",gcp_project_id:"my-gcp-project"}},{id:"cicd-pipeline",name:"CI/CD Pipeline with GitHub Actions",description:"Complete CI/CD pipeline with testing, security scanning, and multi-environment deployment",category:"cicd",provider:"multi",formats:["yaml","terraform"],complexity:"advanced",estimatedCost:"$10-50/month",deploymentTime:"15-30 minutes",tags:["cicd","github-actions","docker","kubernetes","security"],content:{yaml:"# .github/workflows/ci-cd.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  # Code Quality and Security\n  quality:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n          cache: 'npm'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run linting\n        run: npm run lint\n\n      - name: Run tests\n        run: npm run test:coverage\n\n      - name: SonarCloud Scan\n        uses: SonarSource/sonarcloud-github-action@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n      - name: Security scan\n        uses: securecodewarrior/github-action-add-sarif@v1\n        with:\n          sarif-file: 'security-scan-results.sarif'\n\n  # Build and Push Docker Image\n  build:\n    needs: quality\n    runs-on: ubuntu-latest\n    permissions:\n      contents: read\n      packages: write\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      - name: Login to Container Registry\n        uses: docker/login-action@v3\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Extract metadata\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=sha,prefix={{branch}}-\n            type=raw,value=latest,enable={{is_default_branch}}\n\n      - name: Build and push image\n        uses: docker/build-push-action@v5\n        with:\n          context: .\n          platforms: linux/amd64,linux/arm64\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n          cache-from: type=gha\n          cache-to: type=gha,mode=max\n\n  # Deploy to Staging\n  deploy-staging:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/develop'\n    environment:\n      name: staging\n      url: https://staging.example.com\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n        with:\n          version: 'latest'\n\n      - name: Setup Helm\n        uses: azure/setup-helm@v3\n        with:\n          version: 'latest'\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name: Update kubeconfig\n        run: aws eks update-kubeconfig --name staging-cluster --region us-east-1\n\n      - name: Deploy to staging\n        run: |\n          helm upgrade --install myapp ./helm-chart             --namespace staging             --create-namespace             --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}             --set image.tag=${{ github.sha }}             --set environment=staging             --wait\n\n      - name: Run smoke tests\n        run: |\n          kubectl wait --for=condition=ready pod -l app=myapp -n staging --timeout=300s\n          npm run test:smoke -- --env staging\n\n  # Deploy to Production\n  deploy-production:\n    needs: build\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    environment:\n      name: production\n      url: https://example.com\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Setup kubectl\n        uses: azure/setup-kubectl@v3\n\n      - name: Setup Helm\n        uses: azure/setup-helm@v3\n\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n\n      - name: Update kubeconfig\n        run: aws eks update-kubeconfig --name production-cluster --region us-east-1\n\n      - name: Deploy to production\n        run: |\n          helm upgrade --install myapp ./helm-chart             --namespace production             --create-namespace             --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}             --set image.tag=${{ github.sha }}             --set environment=production             --set replicaCount=3             --wait\n\n      - name: Run health checks\n        run: |\n          kubectl wait --for=condition=ready pod -l app=myapp -n production --timeout=300s\n          npm run test:health -- --env production\n\n      - name: Notify deployment\n        uses: 8398a7/action-slack@v3\n        with:\n          status: ${{ job.status }}\n          channel: '#deployments'\n          webhook_url: ${{ secrets.SLACK_WEBHOOK }}\n        if: always()"}},{id:"ibm-cloud-foundry",name:"IBM Cloud Foundry Application",description:"Cloud-native application deployment on IBM Cloud with built-in DevOps and AI services",category:"compute",provider:"ibm",formats:["terraform","yaml"],complexity:"intermediate",estimatedCost:"$80-300/month",deploymentTime:"20-40 minutes",tags:["ibm-cloud","cloud-foundry","paas","devops","watson"],content:{terraform:'# IBM Cloud Foundry Application with Watson AI Services\nterraform {\n  required_providers {\n    ibm = {\n      source = "IBM-Cloud/ibm"\n      version = "~> 1.0"\n    }\n  }\n}\n\nvariable "ibm_api_key" {\n  description = "IBM Cloud API Key"\n  type        = string\n  sensitive   = true\n}\n\nvariable "app_name" {\n  description = "Application name"\n  type        = string\n  default     = "my-ibm-app"\n}\n\nvariable "region" {\n  description = "IBM Cloud region"\n  type        = string\n  default     = "us-south"\n}\n\n# Configure the IBM Provider\nprovider "ibm" {\n  ibmcloud_api_key = var.ibm_api_key\n  region          = var.region\n}\n\n# Resource Group\nresource "ibm_resource_group" "main" {\n  name = "${var.app_name}-rg"\n}\n\n# Cloud Foundry Organization\nresource "ibm_org" "main" {\n  name = "${var.app_name}-org"\n}\n\n# Cloud Foundry Space\nresource "ibm_space" "main" {\n  name = "${var.app_name}-space"\n  org  = ibm_org.main.name\n}\n\n# Watson Language Translator Service\nresource "ibm_resource_instance" "watson_translate" {\n  name              = "${var.app_name}-translator"\n  service           = "language-translator"\n  plan              = "lite"\n  location          = var.region\n  resource_group_id = ibm_resource_group.main.id\n\n  tags = ["watson", "ai", "translation"]\n}\n\n# Watson Natural Language Understanding\nresource "ibm_resource_instance" "watson_nlu" {\n  name              = "${var.app_name}-nlu"\n  service           = "natural-language-understanding"\n  plan              = "lite"\n  location          = var.region\n  resource_group_id = ibm_resource_group.main.id\n\n  tags = ["watson", "ai", "nlu"]\n}\n\n# Cloudant Database\nresource "ibm_resource_instance" "cloudant" {\n  name              = "${var.app_name}-db"\n  service           = "cloudantnosqldb"\n  plan              = "lite"\n  location          = var.region\n  resource_group_id = ibm_resource_group.main.id\n\n  tags = ["database", "nosql"]\n}\n\n# Cloud Foundry Application\nresource "ibm_app" "main" {\n  name             = var.app_name\n  space_guid       = ibm_space.main.id\n  buildpack        = "nodejs_buildpack"\n  disk_quota       = 1024\n  instances        = 2\n  memory           = 256\n  \n  environment_json = {\n    WATSON_TRANSLATOR_URL = ibm_resource_instance.watson_translate.dashboard_url\n    WATSON_NLU_URL       = ibm_resource_instance.watson_nlu.dashboard_url\n    CLOUDANT_URL         = ibm_resource_instance.cloudant.dashboard_url\n  }\n\n  service_instance {\n    service_instance_guid = ibm_resource_instance.watson_translate.guid\n  }\n  \n  service_instance {\n    service_instance_guid = ibm_resource_instance.watson_nlu.guid\n  }\n  \n  service_instance {\n    service_instance_guid = ibm_resource_instance.cloudant.guid\n  }\n}\n\n# IBM Cloud Internet Services (Optional)\nresource "ibm_cis" "main" {\n  name              = "${var.app_name}-cis"\n  plan              = "standard"\n  resource_group_id = ibm_resource_group.main.id\n}\n\n# Outputs\noutput "app_url" {\n  description = "Application URL"\n  value       = "https://${ibm_app.main.name}.${var.region}.cf.appdomain.cloud"\n}\n\noutput "watson_services" {\n  description = "Watson AI Services"\n  value = {\n    translator = ibm_resource_instance.watson_translate.dashboard_url\n    nlu        = ibm_resource_instance.watson_nlu.dashboard_url\n  }\n}\n\noutput "database_url" {\n  description = "Cloudant Database URL"\n  value       = ibm_resource_instance.cloudant.dashboard_url\n  sensitive   = true\n}',yaml:"# IBM Cloud DevOps Pipeline Configuration\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: ibm-cloud-config\ndata:\n  pipeline.yml: |\n    version: '1'\n    setup:\n      image: ibmcom/pipeline-base-image:2.15\n    stages:\n    - name: BUILD\n      image: ibmcom/pipeline-base-image:2.15\n      script: |\n        #!/bin/bash\n        npm install\n        npm run build\n        npm test\n    - name: DEPLOY\n      image: ibmcom/pipeline-base-image:2.15\n      script: |\n        #!/bin/bash\n        cf login -a https://api.${REGION}.cf.cloud.ibm.com\n        cf target -o ${ORG_NAME} -s ${SPACE_NAME}\n        cf push ${APP_NAME}\n    trigger:\n      type: git\n      branch: main"},variables:{app_name:"my-ibm-app",region:"us-south",org_name:"my-organization",space_name:"development"}},{id:"oracle-cloud-infrastructure",name:"Oracle Cloud Infrastructure (OCI) Compute",description:"High-performance compute instances on Oracle Cloud with autonomous database integration",category:"compute",provider:"oracle",formats:["terraform","yaml"],complexity:"advanced",estimatedCost:"$150-500/month",deploymentTime:"30-60 minutes",tags:["oracle-cloud","oci","compute","autonomous-database","load-balancer"],content:{terraform:'# Oracle Cloud Infrastructure (OCI) Compute with Autonomous Database\nterraform {\n  required_providers {\n    oci = {\n      source = "oracle/oci"\n      version = "~> 4.0"\n    }\n  }\n}\n\nvariable "tenancy_ocid" {\n  description = "OCID of the tenancy"\n  type        = string\n}\n\nvariable "user_ocid" {\n  description = "OCID of the user"\n  type        = string\n}\n\nvariable "fingerprint" {\n  description = "Fingerprint of the public key"\n  type        = string\n}\n\nvariable "private_key_path" {\n  description = "Path to the private key"\n  type        = string\n}\n\nvariable "region" {\n  description = "OCI region"\n  type        = string\n  default     = "us-phoenix-1"\n}\n\nvariable "compartment_name" {\n  description = "Name of the compartment"\n  type        = string\n  default     = "terraform-compartment"\n}\n\n# Configure OCI Provider\nprovider "oci" {\n  tenancy_ocid     = var.tenancy_ocid\n  user_ocid        = var.user_ocid\n  fingerprint      = var.fingerprint\n  private_key_path = var.private_key_path\n  region           = var.region\n}\n\n# Get availability domains\ndata "oci_identity_availability_domains" "ads" {\n  compartment_id = var.tenancy_ocid\n}\n\n# Create compartment\nresource "oci_identity_compartment" "main" {\n  compartment_id = var.tenancy_ocid\n  description    = "Compartment for ${var.compartment_name}"\n  name           = var.compartment_name\n  enable_delete  = true\n}\n\n# Virtual Cloud Network (VCN)\nresource "oci_core_vcn" "main" {\n  cidr_block     = "10.0.0.0/16"\n  compartment_id = oci_identity_compartment.main.id\n  display_name   = "${var.compartment_name}-vcn"\n  dns_label      = "mainvcn"\n}\n\n# Internet Gateway\nresource "oci_core_internet_gateway" "main" {\n  compartment_id = oci_identity_compartment.main.id\n  vcn_id         = oci_core_vcn.main.id\n  display_name   = "${var.compartment_name}-igw"\n  enabled        = true\n}\n\n# Route Table\nresource "oci_core_route_table" "main" {\n  compartment_id = oci_identity_compartment.main.id\n  vcn_id         = oci_core_vcn.main.id\n  display_name   = "${var.compartment_name}-rt"\n\n  route_rules {\n    destination       = "0.0.0.0/0"\n    destination_type  = "CIDR_BLOCK"\n    network_entity_id = oci_core_internet_gateway.main.id\n  }\n}\n\n# Security List\nresource "oci_core_security_list" "main" {\n  compartment_id = oci_identity_compartment.main.id\n  vcn_id         = oci_core_vcn.main.id\n  display_name   = "${var.compartment_name}-sl"\n\n  egress_security_rules {\n    destination = "0.0.0.0/0"\n    protocol    = "all"\n  }\n\n  ingress_security_rules {\n    protocol = "6" # TCP\n    source   = "0.0.0.0/0"\n    \n    tcp_options {\n      min = 80\n      max = 80\n    }\n  }\n\n  ingress_security_rules {\n    protocol = "6" # TCP\n    source   = "0.0.0.0/0"\n    \n    tcp_options {\n      min = 443\n      max = 443\n    }\n  }\n\n  ingress_security_rules {\n    protocol = "6" # TCP\n    source   = "0.0.0.0/0"\n    \n    tcp_options {\n      min = 22\n      max = 22\n    }\n  }\n}\n\n# Subnet\nresource "oci_core_subnet" "main" {\n  availability_domain = data.oci_identity_availability_domains.ads.availability_domains[0].name\n  cidr_block          = "10.0.1.0/24"\n  display_name        = "${var.compartment_name}-subnet"\n  compartment_id      = oci_identity_compartment.main.id\n  vcn_id              = oci_core_vcn.main.id\n  route_table_id      = oci_core_route_table.main.id\n  security_list_ids   = [oci_core_security_list.main.id]\n  dns_label           = "mainsubnet"\n}\n\n# Autonomous Database\nresource "oci_database_autonomous_database" "main" {\n  compartment_id                = oci_identity_compartment.main.id\n  db_name                      = "${replace(var.compartment_name, "-", "")}"\n  display_name                 = "${var.compartment_name}-adb"\n  admin_password               = "WelcomePass123#"\n  cpu_core_count              = 1\n  data_storage_size_in_tbs    = 1\n  db_workload                 = "OLTP"\n  is_auto_scaling_enabled     = true\n  is_free_tier               = false\n  license_model              = "LICENSE_INCLUDED"\n}\n\n# Compute Instance\nresource "oci_core_instance" "main" {\n  availability_domain = data.oci_identity_availability_domains.ads.availability_domains[0].name\n  compartment_id      = oci_identity_compartment.main.id\n  display_name        = "${var.compartment_name}-instance"\n  shape               = "VM.Standard.E4.Flex"\n\n  shape_config {\n    ocpus         = 2\n    memory_in_gbs = 8\n  }\n\n  create_vnic_details {\n    subnet_id        = oci_core_subnet.main.id\n    display_name     = "${var.compartment_name}-vnic"\n    assign_public_ip = true\n  }\n\n  source_details {\n    source_type = "image"\n    source_id   = "ocid1.image.oc1.phx.aaaaaaaa6hooptnlbfwr5lwemqjbu3uqidntrlhnt45yihfj222zahe7p3wq" # Oracle Linux 8\n  }\n\n  metadata = {\n    ssh_authorized_keys = file("~/.ssh/id_rsa.pub")\n    user_data = base64encode(templatefile("cloud-init.yaml", {\n      db_connection_string = oci_database_autonomous_database.main.connection_strings[0].high\n    }))\n  }\n}\n\n# Load Balancer\nresource "oci_load_balancer_load_balancer" "main" {\n  compartment_id = oci_identity_compartment.main.id\n  display_name   = "${var.compartment_name}-lb"\n  shape          = "flexible"\n  \n  shape_details {\n    maximum_bandwidth_in_mbps = 100\n    minimum_bandwidth_in_mbps = 10\n  }\n\n  subnet_ids = [oci_core_subnet.main.id]\n}\n\n# Outputs\noutput "instance_public_ip" {\n  description = "Public IP of the compute instance"\n  value       = oci_core_instance.main.public_ip\n}\n\noutput "autonomous_db_connection" {\n  description = "Autonomous Database connection string"\n  value       = oci_database_autonomous_database.main.connection_strings[0].high\n  sensitive   = true\n}\n\noutput "load_balancer_ip" {\n  description = "Load balancer IP address"\n  value       = oci_load_balancer_load_balancer.main.ip_address_details[0].ip_address\n}',yaml:"# OCI Cloud-Init Configuration\n#cloud-config\npackage_update: true\npackage_upgrade: true\n\npackages:\n  - nginx\n  - nodejs\n  - npm\n  - oracle-instantclient-basic\n  - oracle-instantclient-sqlplus\n\nwrite_files:\n  - path: /etc/nginx/nginx.conf\n    content: |\n      events {}\n      http {\n        upstream app {\n          server 127.0.0.1:3000;\n        }\n        server {\n          listen 80;\n          location / {\n            proxy_pass http://app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n          }\n        }\n      }\n\n  - path: /home/opc/app.js\n    content: |\n      const express = require('express');\n      const oracledb = require('oracledb');\n      const app = express();\n      \n      app.get('/', (req, res) => {\n        res.json({ message: 'Hello from Oracle Cloud!', timestamp: new Date() });\n      });\n      \n      app.get('/health', async (req, res) => {\n        try {\n          const connection = await oracledb.getConnection({\n            connectionString: process.env.DB_CONNECTION_STRING\n          });\n          await connection.close();\n          res.json({ status: 'healthy', database: 'connected' });\n        } catch (error) {\n          res.status(500).json({ status: 'unhealthy', error: error.message });\n        }\n      });\n      \n      app.listen(3000, () => {\n        console.log('Server running on port 3000');\n      });\n\nruncmd:\n  - systemctl enable nginx\n  - systemctl start nginx\n  - cd /home/opc && npm init -y\n  - cd /home/opc && npm install express oracledb\n  - cd /home/opc && node app.js &"},variables:{compartment_name:"my-oci-project",region:"us-phoenix-1",instance_shape:"VM.Standard.E4.Flex",db_admin_password:"WelcomePass123#"}},{id:"alibaba-cloud-ecs",name:"Alibaba Cloud Elastic Compute Service",description:"Scalable cloud computing solution with Alibaba Cloud ECS, RDS, and SLB for global applications",category:"compute",provider:"alibaba",formats:["terraform","yaml"],complexity:"intermediate",estimatedCost:"$100-400/month",deploymentTime:"25-45 minutes",tags:["alibaba-cloud","ecs","rds","slb","vpc","scaling"],content:{terraform:'# Alibaba Cloud ECS with RDS and Server Load Balancer\nterraform {\n  required_providers {\n    alicloud = {\n      source  = "aliyun/alicloud"\n      version = "~> 1.0"\n    }\n  }\n}\n\nvariable "access_key" {\n  description = "Alibaba Cloud Access Key"\n  type        = string\n  sensitive   = true\n}\n\nvariable "secret_key" {\n  description = "Alibaba Cloud Secret Key"\n  type        = string\n  sensitive   = true\n}\n\nvariable "region" {\n  description = "Alibaba Cloud region"\n  type        = string\n  default     = "cn-hangzhou"\n}\n\nvariable "project_name" {\n  description = "Project name"\n  type        = string\n  default     = "alibaba-cloud-project"\n}\n\n# Configure Alibaba Cloud Provider\nprovider "alicloud" {\n  access_key = var.access_key\n  secret_key = var.secret_key\n  region     = var.region\n}\n\n# Get availability zones\ndata "alicloud_zones" "main" {\n  available_instance_type = "ecs.n1.medium"\n  available_disk_category = "cloud_efficiency"\n}\n\n# VPC\nresource "alicloud_vpc" "main" {\n  vpc_name   = "${var.project_name}-vpc"\n  cidr_block = "10.0.0.0/16"\n  \n  tags = {\n    Name        = "${var.project_name}-vpc"\n    Environment = "production"\n  }\n}\n\n# VSwitch (Subnet)\nresource "alicloud_vswitch" "main" {\n  vswitch_name = "${var.project_name}-vswitch"\n  vpc_id       = alicloud_vpc.main.id\n  cidr_block   = "10.0.1.0/24"\n  zone_id      = data.alicloud_zones.main.zones.0.id\n}\n\nresource "alicloud_vswitch" "secondary" {\n  vswitch_name = "${var.project_name}-vswitch-secondary"\n  vpc_id       = alicloud_vpc.main.id\n  cidr_block   = "10.0.2.0/24"\n  zone_id      = data.alicloud_zones.main.zones.1.id\n}\n\n# Security Group\nresource "alicloud_security_group" "main" {\n  name   = "${var.project_name}-sg"\n  vpc_id = alicloud_vpc.main.id\n  \n  tags = {\n    Name = "${var.project_name}-security-group"\n  }\n}\n\n# Security Group Rules\nresource "alicloud_security_group_rule" "http" {\n  type              = "ingress"\n  ip_protocol       = "tcp"\n  nic_type          = "intranet"\n  policy            = "accept"\n  port_range        = "80/80"\n  priority          = 1\n  security_group_id = alicloud_security_group.main.id\n  cidr_ip           = "0.0.0.0/0"\n}\n\nresource "alicloud_security_group_rule" "https" {\n  type              = "ingress"\n  ip_protocol       = "tcp"\n  nic_type          = "intranet"\n  policy            = "accept"\n  port_range        = "443/443"\n  priority          = 1\n  security_group_id = alicloud_security_group.main.id\n  cidr_ip           = "0.0.0.0/0"\n}\n\nresource "alicloud_security_group_rule" "ssh" {\n  type              = "ingress"\n  ip_protocol       = "tcp"\n  nic_type          = "intranet"\n  policy            = "accept"\n  port_range        = "22/22"\n  priority          = 1\n  security_group_id = alicloud_security_group.main.id\n  cidr_ip           = "0.0.0.0/0"\n}\n\n# ECS Key Pair\nresource "alicloud_ecs_key_pair" "main" {\n  key_pair_name = "${var.project_name}-keypair"\n  public_key    = file("~/.ssh/id_rsa.pub")\n}\n\n# ECS Instances\nresource "alicloud_instance" "web" {\n  count = 2\n  \n  instance_name              = "${var.project_name}-web-${count.index + 1}"\n  instance_type              = "ecs.n1.medium"\n  image_id                   = "centos_8_4_x64_20G_alibase_20210824.vhd"\n  vswitch_id                 = alicloud_vswitch.main.id\n  security_groups            = [alicloud_security_group.main.id]\n  key_name                   = alicloud_ecs_key_pair.main.key_pair_name\n  internet_max_bandwidth_out = 100\n  \n  system_disk_category = "cloud_efficiency"\n  system_disk_size     = 40\n  \n  user_data = base64encode(templatefile("user-data.sh", {\n    db_host     = alicloud_db_instance.main.connection_string\n    db_username = alicloud_db_instance.main.connection_string\n  }))\n  \n  tags = {\n    Name = "${var.project_name}-web-${count.index + 1}"\n    Type = "WebServer"\n  }\n}\n\n# RDS Instance\nresource "alicloud_db_instance" "main" {\n  engine               = "MySQL"\n  engine_version       = "8.0"\n  instance_type        = "rds.mysql.s1.small"\n  instance_storage     = 20\n  instance_charge_type = "Postpaid"\n  instance_name        = "${var.project_name}-rds"\n  vswitch_id          = alicloud_vswitch.secondary.id\n  monitoring_period    = 60\n  \n  tags = {\n    Name = "${var.project_name}-database"\n  }\n}\n\n# RDS Database\nresource "alicloud_db_database" "main" {\n  instance_id = alicloud_db_instance.main.id\n  name        = "appdb"\n  character_set = "utf8"\n}\n\n# RDS Account\nresource "alicloud_db_account" "main" {\n  db_instance_id   = alicloud_db_instance.main.id\n  account_name     = "appuser"\n  account_password = "AppPass123!"\n  account_type     = "Normal"\n}\n\n# Grant database privileges\nresource "alicloud_db_account_privilege" "main" {\n  instance_id  = alicloud_db_instance.main.id\n  account_name = alicloud_db_account.main.account_name\n  privilege    = "ReadWrite"\n  db_names     = [alicloud_db_database.main.name]\n}\n\n# Server Load Balancer (SLB)\nresource "alicloud_slb_load_balancer" "main" {\n  load_balancer_name = "${var.project_name}-slb"\n  vswitch_id        = alicloud_vswitch.main.id\n  load_balancer_spec = "slb.s1.small"\n  \n  tags = {\n    Name = "${var.project_name}-load-balancer"\n  }\n}\n\n# SLB Listener\nresource "alicloud_slb_listener" "main" {\n  load_balancer_id          = alicloud_slb_load_balancer.main.id\n  backend_port              = 80\n  frontend_port             = 80\n  protocol                  = "http"\n  bandwidth                 = 10\n  health_check_connect_port = 80\n  healthy_threshold         = 2\n  unhealthy_threshold       = 2\n  health_check_timeout      = 5\n  health_check_interval     = 2\n  health_check_http_code    = "http_2xx,http_3xx"\n}\n\n# Attach ECS instances to SLB\nresource "alicloud_slb_attachment" "main" {\n  load_balancer_id = alicloud_slb_load_balancer.main.id\n  instance_ids     = alicloud_instance.web[*].id\n  weight           = 100\n}\n\n# Auto Scaling Group\nresource "alicloud_ess_scaling_group" "main" {\n  min_size           = 2\n  max_size           = 6\n  scaling_group_name = "${var.project_name}-asg"\n  vswitch_ids        = [alicloud_vswitch.main.id]\n  loadbalancer_ids   = [alicloud_slb_load_balancer.main.id]\n  removal_policies   = ["OldestInstance"]\n}\n\n# Auto Scaling Configuration\nresource "alicloud_ess_scaling_configuration" "main" {\n  scaling_group_id  = alicloud_ess_scaling_group.main.id\n  image_id          = "centos_8_4_x64_20G_alibase_20210824.vhd"\n  instance_type     = "ecs.n1.medium"\n  security_group_id = alicloud_security_group.main.id\n  force_delete      = true\n  active            = true\n  enable            = true\n  user_data         = base64encode(file("user-data.sh"))\n  key_name          = alicloud_ecs_key_pair.main.key_pair_name\n  \n  system_disk_category = "cloud_efficiency"\n  system_disk_size     = 40\n}\n\n# Outputs\noutput "load_balancer_ip" {\n  description = "Load balancer public IP"\n  value       = alicloud_slb_load_balancer.main.address\n}\n\noutput "web_server_ips" {\n  description = "Web server public IPs"\n  value       = alicloud_instance.web[*].public_ip\n}\n\noutput "database_connection" {\n  description = "RDS connection string"\n  value       = alicloud_db_instance.main.connection_string\n  sensitive   = true\n}\n\noutput "vpc_id" {\n  description = "VPC ID"\n  value       = alicloud_vpc.main.id\n}',yaml:"# Alibaba Cloud ECS User Data Script\n#!/bin/bash\nyum update -y\nyum install -y nginx nodejs npm mysql\n\n# Configure Nginx\ncat > /etc/nginx/nginx.conf << 'EOF'\nevents {}\nhttp {\n    upstream app {\n        server 127.0.0.1:3000;\n    }\n    \n    server {\n        listen 80;\n        location / {\n            proxy_pass http://app;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n        \n        location /health {\n            access_log off;\n            return 200 'OK';\n            add_header Content-Type text/plain;\n        }\n    }\n}\nEOF\n\n# Create Node.js application\nmkdir -p /opt/app\ncd /opt/app\n\ncat > package.json << 'EOF'\n{\n  \"name\": \"alibaba-cloud-app\",\n  \"version\": \"1.0.0\",\n  \"main\": \"app.js\",\n  \"dependencies\": {\n    \"express\": \"^4.18.0\",\n    \"mysql2\": \"^3.0.0\"\n  }\n}\nEOF\n\ncat > app.js << 'EOF'\nconst express = require('express');\nconst mysql = require('mysql2');\nconst app = express();\n\n// Database connection\nconst db = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n});\n\napp.get('/', (req, res) => {\n  res.json({\n    message: 'Hello from Alibaba Cloud!',\n    timestamp: new Date(),\n    server: require('os').hostname()\n  });\n});\n\napp.get('/health', (req, res) => {\n  db.ping((err) => {\n    if (err) {\n      res.status(500).json({ status: 'unhealthy', database: 'disconnected' });\n    } else {\n      res.json({ status: 'healthy', database: 'connected' });\n    }\n  });\n});\n\napp.get('/data', (req, res) => {\n  db.query('SELECT NOW() as server_time', (err, results) => {\n    if (err) {\n      res.status(500).json({ error: err.message });\n    } else {\n      res.json({ data: results });\n    }\n  });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\nEOF\n\n# Install dependencies and start services\nnpm install\n\n# Set environment variables\necho 'export DB_HOST=\"${db_host}\"' >> /etc/environment\necho 'export DB_USER=\"${db_username}\"' >> /etc/environment\necho 'export DB_PASSWORD=\"AppPass123!\"' >> /etc/environment\necho 'export DB_NAME=\"appdb\"' >> /etc/environment\n\n# Create systemd service\ncat > /etc/systemd/system/app.service << 'EOF'\n[Unit]\nDescription=Node.js App\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nWorkingDirectory=/opt/app\nEnvironmentFile=/etc/environment\nExecStart=/usr/bin/node app.js\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Start services\nsystemctl enable nginx\nsystemctl start nginx\nsystemctl enable app\nsystemctl start app\n\n# Configure firewall\nfirewall-cmd --permanent --add-service=http\nfirewall-cmd --permanent --add-service=https\nfirewall-cmd --reload"},variables:{project_name:"my-alibaba-project",region:"cn-hangzhou",instance_type:"ecs.n1.medium",db_password:"AppPass123!"}}],L=[{id:"api",name:"API & Gateway",icon:c.A,count:2},{id:"database",name:"Databases",icon:l.A,count:1},{id:"compute",name:"Compute",icon:d.A,count:3},{id:"storage",name:"Storage",icon:u.A,count:1},{id:"security",name:"Security",icon:m.A,count:0},{id:"monitoring",name:"Monitoring",icon:p.A,count:0},{id:"cicd",name:"CI/CD",icon:_.A,count:1}],B=[{id:"aws",name:"AWS",color:"bg-orange-100 text-orange-700",count:1},{id:"azure",name:"Azure",color:"bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300",count:1},{id:"gcp",name:"GCP",color:"bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300",count:1},{id:"kubernetes",name:"Kubernetes",color:"bg-purple-100 dark:bg-purple-900/30 text-purple-700 dark:text-purple-300",count:1},{id:"multi",name:"Multi-Cloud",color:"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300",count:2},{id:"ibm",name:"IBM Cloud",color:"bg-indigo-100 dark:bg-indigo-900/30 text-indigo-700",count:1},{id:"oracle",name:"Oracle Cloud",color:"bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300",count:1},{id:"alibaba",name:"Alibaba Cloud",color:"bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300",count:1}],M=[{id:"terraform",name:"Terraform",icon:"\uD83C\uDFD7️"},{id:"bicep",name:"Bicep",icon:"\uD83D\uDCAA"},{id:"cloudformation",name:"CloudFormation",icon:"☁️"},{id:"pulumi",name:"Pulumi",icon:"\uD83D\uDD27"},{id:"ansible",name:"Ansible",icon:"⚙️"},{id:"yaml",name:"YAML/K8s",icon:"\uD83D\uDCDD"}],G=e=>{let{isDarkMode:n=!1,onThemeToggle:a}=e,[i,o]=(0,r.useState)(""),[c,l]=(0,r.useState)("all"),[d,u]=(0,r.useState)("all"),[m,p]=(0,r.useState)("terraform"),[_,I]=(0,r.useState)(null),[P,T]=(0,r.useState)([]),[z,R]=(0,r.useState)(!1),[D,G]=(0,r.useState)(!1),[q,F]=(0,r.useState)({templates:!0}),[W,U]=(0,r.useState)({includeMonitoring:!0,includeSecurity:!0,complexity:"intermediate",estimatedBudget:"",useAdvancedMode:!1}),[K,H]=(0,r.useState)(!1),V=(0,r.useRef)(null);(0,C.GV)(e=>e.auth.isAuthenticated),(0,r.useEffect)(()=>{V.current&&(V.current.style.height="auto",V.current.style.height="".concat(V.current.scrollHeight,"px"))},[i]);let Y=async()=>{if(!i.trim())return;let e={id:Date.now().toString(),query:i,timestamp:new Date,status:"pending",preferredProvider:"all"===d?void 0:d,preferredFormat:m,complexity:W.complexity,includeMonitoring:W.includeMonitoring,includeSecurity:W.includeSecurity,estimatedBudget:W.estimatedBudget||void 0};T(n=>[e,...n]),R(!0);try{let n={query:e.query,preferredProvider:e.preferredProvider,preferredFormat:e.preferredFormat,complexity:e.complexity,includeMonitoring:e.includeMonitoring,includeSecurity:e.includeSecurity,estimatedBudget:e.estimatedBudget},a=await E.generateInfrastructure(n),t={...e,status:"completed",result:{infrastructure:a.infrastructure,explanation:a.explanation,recommendations:a.recommendations,securityConsiderations:a.securityConsiderations,alternatives:a.alternatives,estimatedCost:a.estimatedCost,deploymentTime:a.deploymentTime,templates:$.filter(e=>e.provider===a.infrastructure.provider||"api"===e.category||"compute"===e.category).slice(0,2)}};T(n=>n.map(n=>n.id===e.id?t:n))}catch(a){console.error("AI generation failed:",a);let n={...e,status:"error",result:{explanation:"AI generation failed. Please try again or check your connection.",recommendations:["Try rephrasing your request","Check AI service availability"],templates:$.slice(0,2)}};T(a=>a.map(a=>a.id===e.id?n:a))}finally{R(!1)}},J=$.filter(e=>{let n="all"===c||e.category===c,a="all"===d||e.provider===d;return n&&a}),Q=n?{bg:"bg-slate-900",cardBg:"bg-slate-800",border:"border-slate-700",text:"text-slate-100",textSecondary:"text-slate-400",input:"bg-slate-700 border-slate-600 text-slate-100",button:"bg-purple-600 hover:bg-purple-700",accent:"text-purple-400"}:{bg:"bg-gray-50 dark:bg-gray-900",cardBg:"bg-white dark:bg-gray-800",border:"border-gray-200 dark:border-gray-700",text:"text-gray-900 dark:text-gray-100",textSecondary:"text-gray-600 dark:text-gray-400",input:"bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 text-gray-900 dark:text-gray-100",button:"bg-emerald-600 hover:bg-emerald-700",accent:"text-emerald-600"};return(0,t.jsxs)("div",{className:"min-h-screen ".concat(Q.bg," ").concat(Q.text),children:[(0,t.jsx)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border-b px-6 py-4"),children:(0,t.jsxs)("div",{className:"flex items-center justify-between",children:[(0,t.jsxs)("div",{className:"flex items-center gap-4",children:[(0,t.jsx)("div",{className:"w-10 h-10 ".concat(n?"bg-purple-600":"bg-emerald-600"," rounded-lg flex items-center justify-center"),children:(0,t.jsx)(s.A,{className:"h-5 w-5 text-white"})}),(0,t.jsxs)("div",{children:[(0,t.jsx)("h1",{className:"text-xl font-semibold",children:"Infrastructure Builder"}),(0,t.jsx)("p",{className:"text-sm ".concat(Q.textSecondary),children:"Natural language infrastructure generation and template management"})]})]}),(0,t.jsxs)("div",{className:"flex items-center gap-3",children:[a&&(0,t.jsx)("button",{onClick:a,className:"p-2 rounded-lg ".concat(Q.input," hover:opacity-80 transition-opacity"),children:n?"☀️":"\uD83C\uDF19"}),(0,t.jsx)("button",{className:"px-4 py-2 ".concat(Q.button," text-white rounded-lg text-sm font-medium transition-colors"),children:"Save Project"})]})]})}),(0,t.jsxs)("div",{className:"flex h-[calc(100vh-80px)]",children:[(0,t.jsxs)("div",{className:"w-80 ".concat(Q.cardBg," ").concat(Q.border," border-r flex flex-col"),children:[(0,t.jsxs)("div",{className:"p-4 border-b border-gray-200 dark:border-slate-700",children:[(0,t.jsxs)("div",{className:"mb-3",children:[(0,t.jsxs)("label",{className:"block text-sm font-medium ".concat(Q.text," mb-2"),children:[(0,t.jsx)(g.A,{className:"inline h-4 w-4 mr-1"}),"Sirsi AI Assistant"]}),(0,t.jsx)("textarea",{ref:V,value:i,onChange:e=>o(e.target.value),placeholder:"Describe your infrastructure needs in natural language...",className:"w-full p-3 rounded-lg ".concat(Q.input," text-sm resize-none min-h-[80px] max-h-[200px] focus:ring-2 focus:ring-emerald-500 focus:border-transparent"),onKeyDown:e=>{"Enter"===e.key&&(e.metaKey||e.ctrlKey)&&Y()}})]}),(0,t.jsx)("div",{className:"flex gap-2",children:(0,t.jsx)("button",{onClick:Y,disabled:!i.trim()||z,className:"flex-1 px-4 py-2 ".concat(Q.button," text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"),children:z?(0,t.jsxs)("span",{className:"flex items-center gap-2",children:[(0,t.jsx)(b.A,{className:"h-4 w-4 animate-spin"}),"Generating..."]}):(0,t.jsxs)("span",{className:"flex items-center gap-2",children:[(0,t.jsx)(g.A,{className:"h-4 w-4"}),"Generate"]})})}),(0,t.jsxs)("div",{className:"mt-3",children:[(0,t.jsx)("label",{className:"block text-xs font-medium ".concat(Q.text," mb-2"),children:"AI Engine"}),(0,t.jsx)(O,{isDarkMode:n,onProviderChange:e=>{console.log("AI Provider changed to:",e)}})]})]}),(0,t.jsx)("div",{className:"p-4 border-b border-gray-200 dark:border-slate-700",children:(0,t.jsx)("div",{className:"flex flex-wrap gap-2",children:["Serverless API with auth","Kubernetes cluster","CI/CD pipeline","Database with backup","Multi-region setup"].map(e=>(0,t.jsx)("button",{onClick:()=>o(e),className:"px-3 py-1 text-xs rounded-full ".concat(Q.input," hover:opacity-80 transition-opacity"),children:e},e))})}),(0,t.jsxs)("div",{className:"p-4 border-b border-gray-200 dark:border-slate-700",children:[(0,t.jsxs)("button",{onClick:()=>F(e=>({...e,templates:!e.templates})),className:"flex items-center justify-between w-full mb-3",children:[(0,t.jsx)("h3",{className:"text-sm font-medium ".concat(Q.text),children:"Template Categories"}),q.templates?(0,t.jsx)(y.A,{className:"h-4 w-4"}):(0,t.jsx)(h.A,{className:"h-4 w-4"})]}),q.templates&&(0,t.jsxs)("div",{className:"space-y-1",children:[(0,t.jsx)("button",{onClick:()=>l("all"),className:"w-full text-left px-3 py-2 rounded-lg text-sm transition-colors ".concat("all"===c?"".concat(Q.button," text-white"):"".concat(Q.textSecondary," hover:").concat(Q.text)),children:"All Categories"}),L.map(e=>{let n=e.icon;return(0,t.jsx)("button",{onClick:()=>l(e.id),className:"w-full text-left px-3 py-2 rounded-lg text-sm transition-colors ".concat(c===e.id?"".concat(Q.button," text-white"):"".concat(Q.textSecondary," hover:").concat(Q.text)),children:(0,t.jsxs)("div",{className:"flex items-center justify-between",children:[(0,t.jsxs)("div",{className:"flex items-center gap-2",children:[(0,t.jsx)(n,{className:"h-4 w-4"}),e.name]}),(0,t.jsx)("span",{className:"text-xs px-2 py-0.5 rounded-full ".concat(c===e.id?"bg-white dark:bg-gray-800/20 text-white":"bg-gray-100 dark:bg-gray-800 text-gray-600 dark:bg-slate-700 dark:text-slate-400"),children:e.count})]})},e.id)})]})]}),(0,t.jsxs)("div",{className:"p-4 border-b border-gray-200 dark:border-slate-700",children:[(0,t.jsx)("h3",{className:"text-sm font-medium ".concat(Q.text," mb-3"),children:"Cloud Providers"}),(0,t.jsxs)("div",{className:"flex flex-wrap gap-2",children:[(0,t.jsx)("button",{onClick:()=>u("all"),className:"px-3 py-1 text-xs rounded-full transition-colors ".concat("all"===d?"".concat(Q.button," text-white"):"".concat(Q.input," hover:opacity-80")),children:"All"}),B.map(e=>(0,t.jsx)("button",{onClick:()=>u(e.id),className:"px-3 py-1 text-xs rounded-full transition-colors ".concat(d===e.id?"".concat(Q.button," text-white"):e.color),children:e.name},e.id))]})]}),(0,t.jsxs)("div",{className:"flex-1 overflow-y-auto p-4",children:[(0,t.jsxs)("h3",{className:"text-sm font-medium ".concat(Q.text," mb-3"),children:["Templates (",J.length,")"]}),(0,t.jsx)("div",{className:"space-y-2",children:J.map(e=>{var n,a;return(0,t.jsxs)("button",{onClick:()=>I(e),className:"w-full text-left p-3 rounded-lg ".concat(Q.input," hover:opacity-80 transition-opacity"),children:[(0,t.jsxs)("div",{className:"flex items-start justify-between mb-2",children:[(0,t.jsx)("h4",{className:"font-medium ".concat(Q.text," text-sm"),children:e.name}),(0,t.jsx)("span",{className:"text-xs px-2 py-1 rounded-full ".concat((null==(n=B.find(n=>n.id===e.provider))?void 0:n.color)||"bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400"),children:null==(a=B.find(n=>n.id===e.provider))?void 0:a.name})]}),(0,t.jsx)("p",{className:"text-xs ".concat(Q.textSecondary," mb-2"),children:e.description}),(0,t.jsxs)("div",{className:"flex items-center gap-2 text-xs",children:[(0,t.jsx)("span",{className:"px-2 py-0.5 rounded-full ".concat("basic"===e.complexity?"bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-300":"intermediate"===e.complexity?"bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-300":"bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300"),children:e.complexity}),(0,t.jsx)("span",{className:Q.textSecondary,children:e.estimatedCost})]})]},e.id)})})]})]}),(0,t.jsx)("div",{className:"flex-1 flex flex-col",children:_?(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border-b px-6 py-4"),children:(0,t.jsxs)("div",{className:"flex items-center justify-between",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)("h2",{className:"text-lg font-semibold ".concat(Q.text),children:_.name}),(0,t.jsx)("p",{className:"text-sm ".concat(Q.textSecondary),children:_.description})]}),(0,t.jsxs)("div",{className:"flex items-center gap-3",children:[(0,t.jsx)("button",{onClick:()=>G(!D),className:"p-2 rounded-lg ".concat(Q.input," hover:opacity-80 transition-opacity"),children:(0,t.jsx)(v.A,{className:"h-4 w-4"})}),(0,t.jsx)("button",{className:"p-2 rounded-lg ".concat(Q.input," hover:opacity-80 transition-opacity"),children:(0,t.jsx)(x.A,{className:"h-4 w-4"})}),(0,t.jsx)("button",{className:"p-2 rounded-lg ".concat(Q.input," hover:opacity-80 transition-opacity"),children:(0,t.jsx)(f.A,{className:"h-4 w-4"})}),(0,t.jsx)("button",{onClick:()=>I(null),className:"p-2 rounded-lg ".concat(Q.input," hover:opacity-80 transition-opacity"),children:(0,t.jsx)(w.A,{className:"h-4 w-4"})})]})]})}),(0,t.jsx)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border-b px-6 py-2"),children:(0,t.jsx)("div",{className:"flex gap-1",children:_.formats.map(e=>{let n=M.find(n=>n.id===e);return(0,t.jsxs)("button",{onClick:()=>p(e),className:"px-4 py-2 text-sm font-medium rounded-lg transition-colors ".concat(m===e?"".concat(Q.button," text-white"):"".concat(Q.textSecondary," hover:").concat(Q.text)),children:[(0,t.jsx)("span",{className:"mr-2",children:null==n?void 0:n.icon}),null==n?void 0:n.name]},e)})})}),(0,t.jsxs)("div",{className:"flex-1 flex",children:[(0,t.jsx)("div",{className:"flex-1 p-6",children:(0,t.jsx)("pre",{className:"".concat(Q.cardBg," ").concat(Q.border," border rounded-lg p-4 text-sm font-mono overflow-auto h-full"),children:(0,t.jsx)("code",{className:Q.text,children:_.content[m]||"No content available for this format"})})}),D&&_.variables&&(0,t.jsxs)("div",{className:"w-80 ".concat(Q.cardBg," ").concat(Q.border," border-l p-4"),children:[(0,t.jsx)("h3",{className:"text-sm font-medium ".concat(Q.text," mb-4"),children:"Variables"}),(0,t.jsx)("div",{className:"space-y-3",children:Object.entries(_.variables).map(e=>{let[n,a]=e;return(0,t.jsxs)("div",{children:[(0,t.jsx)("label",{className:"block text-xs font-medium ".concat(Q.text," mb-1"),children:n}),(0,t.jsx)("input",{type:"text",defaultValue:a,className:"w-full p-2 text-xs rounded-lg ".concat(Q.input," focus:ring-2 focus:ring-emerald-500 focus:border-transparent")})]},n)})})]})]})]}):(0,t.jsx)("div",{className:"flex-1 p-6",children:(0,t.jsxs)("div",{className:"max-w-4xl mx-auto",children:[P.length>0&&(0,t.jsxs)("div",{className:"mb-8",children:[(0,t.jsx)("h3",{className:"text-lg font-semibold ".concat(Q.text," mb-4"),children:"Recent Generations"}),(0,t.jsx)("div",{className:"space-y-4",children:P.slice(0,3).map(e=>(0,t.jsxs)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border rounded-lg p-4"),children:[(0,t.jsxs)("div",{className:"flex items-start justify-between mb-3",children:[(0,t.jsxs)("div",{className:"flex-1",children:[(0,t.jsxs)("p",{className:"text-sm ".concat(Q.text," mb-1"),children:['"',e.query,'"']}),(0,t.jsx)("p",{className:"text-xs ".concat(Q.textSecondary),children:e.timestamp.toLocaleString()})]}),(0,t.jsxs)("div",{className:"flex items-center gap-2",children:["completed"===e.status&&(0,t.jsx)(S.A,{className:"h-4 w-4 text-green-500"}),"generating"===e.status&&(0,t.jsx)(b.A,{className:"h-4 w-4 text-blue-500 animate-spin"}),"error"===e.status&&(0,t.jsx)(A.A,{className:"h-4 w-4 text-red-500"}),"pending"===e.status&&(0,t.jsx)(k.A,{className:"h-4 w-4 text-gray-500 dark:text-gray-400"})]})]}),e.result&&(0,t.jsxs)("div",{className:"space-y-3",children:[(0,t.jsx)("p",{className:"text-sm ".concat(Q.textSecondary),children:e.result.explanation}),e.result.templates&&e.result.templates.length>0&&(0,t.jsxs)("div",{children:[(0,t.jsx)("p",{className:"text-xs font-medium ".concat(Q.text," mb-2"),children:"Generated Templates:"}),(0,t.jsx)("div",{className:"flex gap-2",children:e.result.templates.map(e=>(0,t.jsx)("button",{onClick:()=>I(e),className:"px-3 py-1 text-xs rounded-full ".concat(Q.button," text-white hover:opacity-80 transition-opacity"),children:e.name},e.id))})]})]})]},e.id))})]}),(0,t.jsxs)("div",{className:"text-center py-12",children:[(0,t.jsx)("div",{className:"w-16 h-16 ".concat(n?"bg-purple-600":"bg-emerald-600"," rounded-xl flex items-center justify-center mx-auto mb-6"),children:(0,t.jsx)(g.A,{className:"h-8 w-8 text-white"})}),(0,t.jsx)("h2",{className:"text-2xl font-semibold ".concat(Q.text," mb-4"),children:"Infrastructure Builder"}),(0,t.jsx)("p",{className:"text-lg ".concat(Q.textSecondary," mb-8 max-w-2xl mx-auto"),children:"Describe your infrastructure needs in natural language, and our AI will generate production-ready templates in your preferred format."}),(0,t.jsxs)("div",{className:"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto",children:[(0,t.jsxs)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border rounded-lg p-6 text-center"),children:[(0,t.jsx)("div",{className:"w-12 h-12 ".concat(n?"bg-purple-100 dark:bg-purple-900/30":"bg-emerald-100 dark:bg-emerald-900/30"," rounded-lg flex items-center justify-center mx-auto mb-4"),children:(0,t.jsx)(j.A,{className:"h-6 w-6 ".concat(n?"text-purple-600":"text-emerald-600")})}),(0,t.jsx)("h3",{className:"font-semibold ".concat(Q.text," mb-2"),children:"Natural Language"}),(0,t.jsx)("p",{className:"text-sm ".concat(Q.textSecondary),children:"Describe what you need in plain English"})]}),(0,t.jsxs)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border rounded-lg p-6 text-center"),children:[(0,t.jsx)("div",{className:"w-12 h-12 ".concat(n?"bg-purple-100 dark:bg-purple-900/30":"bg-emerald-100 dark:bg-emerald-900/30"," rounded-lg flex items-center justify-center mx-auto mb-4"),children:(0,t.jsx)(s.A,{className:"h-6 w-6 ".concat(n?"text-purple-600":"text-emerald-600")})}),(0,t.jsx)("h3",{className:"font-semibold ".concat(Q.text," mb-2"),children:"Multiple Formats"}),(0,t.jsx)("p",{className:"text-sm ".concat(Q.textSecondary),children:"Terraform, Bicep, CloudFormation, and more"})]}),(0,t.jsxs)("div",{className:"".concat(Q.cardBg," ").concat(Q.border," border rounded-lg p-6 text-center"),children:[(0,t.jsx)("div",{className:"w-12 h-12 ".concat(n?"bg-purple-100 dark:bg-purple-900/30":"bg-emerald-100 dark:bg-emerald-900/30"," rounded-lg flex items-center justify-center mx-auto mb-4"),children:(0,t.jsx)(N.A,{className:"h-6 w-6 ".concat(n?"text-purple-600":"text-emerald-600")})}),(0,t.jsx)("h3",{className:"font-semibold ".concat(Q.text," mb-2"),children:"Production Ready"}),(0,t.jsx)("p",{className:"text-sm ".concat(Q.textSecondary),children:"Best practices and security built-in"})]})]})]})]})})})]})]})};function q(){let{theme:e,setTheme:n}=(0,o.D)(),[a,c]=(0,r.useState)(!1),l=(0,i.useSearchParams)();null==l||l.get("query");let d=(0,C.GV)(e=>e.auth.isAuthenticated);(0,r.useEffect)(()=>{c(!0)},[]);let u="dark"===e;return((0,r.useEffect)(()=>(a&&(u?document.body.classList.add("dark"):document.body.classList.remove("dark")),()=>{document.body.classList.remove("dark")}),[u,a]),a)?d?(0,t.jsxs)("div",{children:[(0,t.jsxs)("div",{className:"mb-8",children:[(0,t.jsxs)("h1",{className:"text-3xl font-bold text-gray-900 dark:text-gray-100 flex items-center gap-3",children:[(0,t.jsx)(s.A,{className:"h-8 w-8 text-emerald-600 dark:text-emerald-400"}),"Infrastructure Builder"]}),(0,t.jsx)("p",{className:"text-gray-600 dark:text-gray-400 mt-2",children:"Build and deploy infrastructure using natural language with AI assistance"})]}),(0,t.jsx)(G,{isDarkMode:u,onThemeToggle:()=>{n("dark"===e?"light":"dark")}})]}):(0,t.jsx)("div",{className:"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center",children:(0,t.jsxs)("div",{className:"text-center",children:[(0,t.jsx)("h1",{className:"text-2xl font-semibold text-gray-900 dark:text-gray-100 mb-4",children:"Authentication Required"}),(0,t.jsx)("p",{className:"text-gray-600 dark:text-gray-400 mb-6",children:"Please sign in to access the Infrastructure Builder."}),(0,t.jsx)("button",{onClick:()=>window.location.href="/",className:"px-6 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors",children:"Go to Dashboard"})]})}):(0,t.jsx)("div",{className:"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center",children:(0,t.jsx)("div",{className:"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"})})}function F(){return(0,t.jsx)(r.Suspense,{fallback:(0,t.jsx)("div",{className:"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center",children:(0,t.jsx)("div",{className:"animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-600"})}),children:(0,t.jsx)(q,{})})}},32058:(e,n,a)=>{Promise.resolve().then(a.bind(a,30577))},35324:(e,n,a)=>{"use strict";a.d(n,{Ay:()=>x,By:()=>_,ID:()=>p,Nh:()=>d,dr:()=>y,i3:()=>h,kL:()=>v,r$:()=>o,r1:()=>l,vm:()=>u,vr:()=>g,xx:()=>b});var t=a(73106);let r={projects:[],currentProject:null,loading:!1,error:null,filters:{status:[],tags:[],search:""},sort:{field:"updatedAt",order:"desc"}},i=(0,t.Z0)({name:"project",initialState:r,reducers:{setProjects:(e,n)=>{e.projects=n.payload},setCurrentProject:(e,n)=>{e.currentProject=n.payload},clearCurrentProject:e=>{e.currentProject=null},setLoading:(e,n)=>{e.loading=n.payload},setError:(e,n)=>{e.error=n.payload},updateFilters:(e,n)=>{e.filters={...e.filters,...n.payload}},resetFilters:e=>{e.filters=r.filters},updateSort:(e,n)=>{e.sort=n.payload},addProject:(e,n)=>{e.projects.push(n.payload)},updateProject:(e,n)=>{let a=e.projects.findIndex(e=>e.id===n.payload.id);if(-1!==a){var t;e.projects[a]={...e.projects[a],...n.payload},(null==(t=e.currentProject)?void 0:t.id)===n.payload.id&&(e.currentProject={...e.currentProject,...n.payload})}},deleteProject:(e,n)=>{var a;e.projects=e.projects.filter(e=>e.id!==n.payload),(null==(a=e.currentProject)?void 0:a.id)===n.payload&&(e.currentProject=null)},addTeamMember:(e,n)=>{let a=e.projects.find(e=>e.id===n.payload.projectId);if(a){var t;a.team=a.team||[],a.team.push(n.payload.member),(null==(t=e.currentProject)?void 0:t.id)===n.payload.projectId&&(e.currentProject.team=e.currentProject.team||[],e.currentProject.team.push(n.payload.member))}},removeTeamMember:(e,n)=>{let a=e.projects.find(e=>e.id===n.payload.projectId);if(a&&a.team){var t;a.team=a.team.filter(e=>e.id!==n.payload.memberId),(null==(t=e.currentProject)?void 0:t.id)===n.payload.projectId&&e.currentProject.team&&(e.currentProject.team=e.currentProject.team.filter(e=>e.id!==n.payload.memberId))}},updateProjectStats:(e,n)=>{let a=e.projects.find(e=>e.id===n.payload.projectId);if(a){var t;a.stats=n.payload.stats,(null==(t=e.currentProject)?void 0:t.id)===n.payload.projectId&&(e.currentProject.stats=n.payload.stats)}}}}),{setProjects:o,setCurrentProject:s,clearCurrentProject:c,setLoading:l,setError:d,updateFilters:u,resetFilters:m,updateSort:p,addProject:_,updateProject:g,deleteProject:b,addTeamMember:y,removeTeamMember:h,updateProjectStats:v}=i.actions,x=i.reducer},72966:(e,n,a)=>{"use strict";a.d(n,{M_:()=>C,jL:()=>I,GV:()=>P});var t=a(73106),r=a(87088),i=a(87127),o=a(35324);let s={currentStep:"plan",stepStatuses:{plan:"not_started",specify:"not_started",test:"not_started",build:"not_started",transfer:"not_started",validate:"not_started",optimize:"not_started",support:"not_started"},discoveredResources:[],migrationProgress:0,isInProgress:!1},c=(0,t.Z0)({name:"migration",initialState:s,reducers:{setCurrentStep:(e,n)=>{e.currentStep=n.payload},updateStepStatus:(e,n)=>{e.stepStatuses[n.payload.step]=n.payload.status},setDiscoveredResources:(e,n)=>{e.discoveredResources=n.payload},updateMigrationProgress:(e,n)=>{e.migrationProgress=n.payload},setMigrationInProgress:(e,n)=>{e.isInProgress=n.payload},resetMigration:e=>s}}),{setCurrentStep:l,updateStepStatus:d,setDiscoveredResources:u,updateMigrationProgress:m,setMigrationInProgress:p,resetMigration:_}=c.actions,g=c.reducer;var b=a(1315);let y=(0,t.Z0)({name:"agent",initialState:{messages:[],suggestions:[],isTyping:!1,currentContext:null,activeAgents:[],status:"idle",error:null},reducers:{addMessage:(e,n)=>{e.messages.push(n.payload)},setTyping:(e,n)=>{e.isTyping=n.payload},setSuggestions:(e,n)=>{e.suggestions=n.payload},setContext:(e,n)=>{e.currentContext=n.payload},addActiveAgent:(e,n)=>{e.activeAgents.includes(n.payload)||e.activeAgents.push(n.payload)},removeActiveAgent:(e,n)=>{e.activeAgents=e.activeAgents.filter(e=>e!==n.payload)},clearMessages:e=>{e.messages=[]},setError:(e,n)=>{e.error=n.payload},setAgentStatus:(e,n)=>{e.status=n.payload}}}),{addMessage:h,setTyping:v,setSuggestions:x,setContext:f,addActiveAgent:w,removeActiveAgent:S,clearMessages:A,setError:k,setAgentStatus:j}=y.actions,N=y.reducer,C=(0,t.U1)({reducer:{auth:i.Ay,projects:o.Ay,migrations:g,ui:b.Ay,agent:N},middleware:e=>e({serializableCheck:{ignoredActions:["socket/connected","socket/disconnected"]}})}),I=()=>(0,r.wA)(),P=r.d4},87127:(e,n,a)=>{"use strict";a.d(n,{Ay:()=>p,TK:()=>d,iD:()=>u,ri:()=>l});var t=a(73106);let r={isAuthenticated:!1,user:null,token:null,loading:!1,error:null,sessionExpiry:null,persistSession:!1,...(()=>{try{let e=localStorage.getItem("sirsi-nexus-session");if(e){let n=JSON.parse(e);if(n.sessionExpiry&&new Date(n.sessionExpiry)>new Date)return{isAuthenticated:!0,user:n.user,token:n.token,sessionExpiry:n.sessionExpiry,persistSession:!0};localStorage.removeItem("sirsi-nexus-session")}}catch(e){console.error("Failed to load persisted session:",e),localStorage.removeItem("sirsi-nexus-session")}return{}})()},i=(0,t.Z0)({name:"auth",initialState:r,reducers:{loginStart:e=>{e.loading=!0,e.error=null},loginSuccess:(e,n)=>{e.isAuthenticated=!0,e.user=n.payload.user,e.token=n.payload.token,e.loading=!1,e.error=null},loginFailure:(e,n)=>{e.loading=!1,e.error=n.payload},logout:e=>{e.isAuthenticated=!1,e.user=null,e.token=null,e.error=null,e.sessionExpiry=null,e.persistSession=!1;try{localStorage.removeItem("sirsi-nexus-session")}catch(e){console.error("Failed to clear persisted session:",e)}},updateUser:(e,n)=>{e.user&&(e.user={...e.user,...n.payload})},login:(e,n)=>{let a=new Date;a.setHours(a.getHours()+(n.payload.rememberMe?168:24));let t={...n.payload,lastLogin:new Date().toISOString(),preferences:n.payload.preferences||{theme:"light",notifications:!0,autoSave:!0}};if(e.isAuthenticated=!0,e.user=t,e.token="sirsi-token-".concat(Date.now()),e.loading=!1,e.error=null,e.sessionExpiry=a.toISOString(),e.persistSession=n.payload.rememberMe||!1,n.payload.rememberMe)try{localStorage.setItem("sirsi-nexus-session",JSON.stringify({user:t,token:e.token,sessionExpiry:e.sessionExpiry}))}catch(e){console.error("Failed to persist session:",e)}},register:(e,n)=>{let a=new Date;a.setHours(a.getHours()+24);let t={...n.payload,createdAt:new Date().toISOString(),lastLogin:new Date().toISOString(),preferences:{theme:"light",notifications:!0,autoSave:!0}};e.isAuthenticated=!0,e.user=t,e.token="sirsi-token-".concat(Date.now()),e.loading=!1,e.error=null,e.sessionExpiry=a.toISOString(),e.persistSession=!1}}}),{loginStart:o,loginSuccess:s,loginFailure:c,logout:l,updateUser:d,login:u,register:m}=i.actions,p=i.reducer}},e=>{var n=n=>e(e.s=n);e.O(0,[3065,4306,2347,4870,7358],()=>n(32058)),_N_E=e.O()}]);